{"version":3,"file":"translation.js","sources":["../../src/shared/dom-utils.ts","../../src/content/translation/translation-injector.ts","../../src/content/translation/ui-controller.ts","../../src/content/translation/translation-loader.ts","../../src/content/translation/index.ts"],"sourcesContent":["// DOM操作工具函数\r\n\r\n/**\r\n * 通过多种选择器策略查找元素\r\n */\r\nexport function findElementBySelectors(selectors: string[]): Element | null {\r\n  for (const selector of selectors) {\r\n    try {\r\n      // 处理文本选择器 \"text:xxxxx\"\r\n      if (selector.startsWith('text:')) {\r\n        const text = selector.substring(5);\r\n        const elements = document.querySelectorAll('label, span, div, p');\r\n        for (const el of elements) {\r\n          if (el.textContent?.toLowerCase().includes(text.toLowerCase())) {\r\n            return el;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // 标准CSS选择器\r\n      const element = document.querySelector(selector);\r\n      if (element) {\r\n        return element;\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Invalid selector: ${selector}`, error);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * 创建翻译注释元素\r\n */\r\nexport function createTranslationElement(\r\n  zh: string, \r\n  note: string, \r\n  showNote: boolean,\r\n  position: 'right' | 'below'\r\n): HTMLElement {\r\n  const container = document.createElement('div');\r\n  container.className = 'ds160-translation-container';\r\n  \r\n  // 使用Shadow DOM隔离样式\r\n  const shadow = container.attachShadow({ mode: 'open' });\r\n  \r\n  // 创建样式\r\n  const style = document.createElement('style');\r\n  style.textContent = `\r\n    .translation-wrapper {\r\n      display: inline-block;\r\n      margin-left: ${position === 'right' ? '8px' : '0'};\r\n      margin-top: ${position === 'below' ? '4px' : '0'};\r\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n      font-size: 13px;\r\n      line-height: 1.4;\r\n    }\r\n    \r\n    .translation-text {\r\n      color: #666;\r\n      font-weight: 500;\r\n      background: rgba(59, 130, 246, 0.1);\r\n      padding: 2px 6px;\r\n      border-radius: 4px;\r\n      border: 1px solid rgba(59, 130, 246, 0.2);\r\n    }\r\n    \r\n    .translation-note {\r\n      color: #888;\r\n      font-size: 11px;\r\n      margin-top: 2px;\r\n      padding: 2px 4px;\r\n      background: rgba(156, 163, 175, 0.1);\r\n      border-radius: 3px;\r\n      border-left: 2px solid #e5e7eb;\r\n      display: ${showNote ? 'block' : 'none'};\r\n    }\r\n    \r\n    .translation-wrapper:hover .translation-note {\r\n      display: block;\r\n    }\r\n  `;\r\n  \r\n  // 创建内容\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'translation-wrapper';\r\n  \r\n  const textSpan = document.createElement('span');\r\n  textSpan.className = 'translation-text';\r\n  textSpan.textContent = zh;\r\n  \r\n  const noteDiv = document.createElement('div');\r\n  noteDiv.className = 'translation-note';\r\n  noteDiv.textContent = note;\r\n  \r\n  shadow.appendChild(style);\r\n  shadow.appendChild(wrapper);\r\n  wrapper.appendChild(textSpan);\r\n  if (note) {\r\n    wrapper.appendChild(noteDiv);\r\n  }\r\n  \r\n  return container;\r\n}\r\n\r\n/**\r\n * 检查元素是否已经注入翻译\r\n */\r\nexport function hasTranslation(element: Element): boolean {\r\n  return element.parentElement?.querySelector('.ds160-translation-container') !== null;\r\n}\r\n\r\n/**\r\n * 移除已注入的翻译\r\n */\r\nexport function removeTranslation(element: Element): void {\r\n  const container = element.parentElement?.querySelector('.ds160-translation-container');\r\n  if (container) {\r\n    container.remove();\r\n  }\r\n}\r\n\r\n/**\r\n * 等待DOM加载完成\r\n */\r\nexport function waitForDOM(): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    if (document.readyState === 'loading') {\r\n      document.addEventListener('DOMContentLoaded', () => resolve());\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 节流函数\r\n */\r\nexport function throttle<T extends (...args: any[]) => void>(\r\n  func: T,\r\n  delay: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeoutId: number | null = null;\r\n  let lastExecTime = 0;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    const currentTime = Date.now();\r\n    \r\n    if (currentTime - lastExecTime > delay) {\r\n      func(...args);\r\n      lastExecTime = currentTime;\r\n    } else {\r\n      if (timeoutId) {\r\n        clearTimeout(timeoutId);\r\n      }\r\n      timeoutId = window.setTimeout(() => {\r\n        func(...args);\r\n        lastExecTime = Date.now();\r\n        timeoutId = null;\r\n      }, delay - (currentTime - lastExecTime));\r\n    }\r\n  };\r\n}\r\n","import type { TranslationData, TranslationField, TranslationSettings } from '@/shared/types';\r\nimport { \r\n  findElementBySelectors, \r\n  createTranslationElement, \r\n  hasTranslation, \r\n  removeTranslation,\r\n  throttle \r\n} from '@/shared/dom-utils';\r\n\r\nexport class TranslationInjector {\r\n  private translationData: TranslationData | null = null;\r\n  private settings: TranslationSettings;\r\n  private observer: MutationObserver | null = null;\r\n  private injectedElements = new Set<Element>();\r\n\r\n  constructor(settings: TranslationSettings) {\r\n    this.settings = settings;\r\n    this.setupMutationObserver();\r\n  }\r\n\r\n  /**\r\n   * 设置翻译数据\r\n   */\r\n  setTranslationData(data: TranslationData): void {\r\n    this.translationData = data;\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  updateSettings(settings: TranslationSettings): void {\r\n    this.settings = settings;\r\n    \r\n    if (settings.enabled) {\r\n      this.injectTranslations();\r\n    } else {\r\n      this.removeAllTranslations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注入所有翻译\r\n   */\r\n  injectTranslations(): void {\r\n    if (!this.translationData || !this.settings.enabled) {\r\n      return;\r\n    }\r\n\r\n    let injectedCount = 0;\r\n    const startTime = performance.now();\r\n\r\n    for (const field of this.translationData.fields) {\r\n      // 检查字段级别是否匹配当前模式\r\n      if (!this.shouldInjectField(field)) {\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        const success = this.injectFieldTranslation(field);\r\n        if (success) {\r\n          injectedCount++;\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to inject translation for field ${field.key}:`, error);\r\n      }\r\n    }\r\n\r\n    const duration = performance.now() - startTime;\r\n    console.log(`Injected ${injectedCount} translations in ${duration.toFixed(2)}ms`);\r\n  }\r\n\r\n  /**\r\n   * 注入单个字段的翻译\r\n   */\r\n  private injectFieldTranslation(field: TranslationField): boolean {\r\n    const targetElement = findElementBySelectors(field.selectors);\r\n    if (!targetElement) {\r\n      return false;\r\n    }\r\n\r\n    // 检查是否已经注入\r\n    if (hasTranslation(targetElement)) {\r\n      return false;\r\n    }\r\n\r\n    // 创建翻译元素\r\n    const translationElement = createTranslationElement(\r\n      field.zh,\r\n      field.note,\r\n      this.settings.showNotes && field.level === 'detailed',\r\n      this.settings.position\r\n    );\r\n\r\n    // 注入翻译\r\n    this.insertTranslationElement(targetElement, translationElement);\r\n    this.injectedElements.add(targetElement);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 插入翻译元素到适当位置\r\n   */\r\n  private insertTranslationElement(targetElement: Element, translationElement: HTMLElement): void {\r\n    const parent = targetElement.parentElement;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    if (this.settings.position === 'right') {\r\n      // 在目标元素后插入\r\n      targetElement.insertAdjacentElement('afterend', translationElement);\r\n    } else {\r\n      // 在父容器末尾插入\r\n      parent.appendChild(translationElement);\r\n    }\r\n\r\n    // 为可访问性添加关联\r\n    if (targetElement.id) {\r\n      translationElement.setAttribute('aria-labelledby', targetElement.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断是否应该注入字段翻译\r\n   */\r\n  private shouldInjectField(field: TranslationField): boolean {\r\n    // 根据设置模式过滤字段\r\n    if (this.settings.mode === 'brief' && field.level === 'detailed') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 移除所有翻译\r\n   */\r\n  removeAllTranslations(): void {\r\n    for (const element of this.injectedElements) {\r\n      removeTranslation(element);\r\n    }\r\n    this.injectedElements.clear();\r\n  }\r\n\r\n  /**\r\n   * 设置DOM变化监听器\r\n   */\r\n  private setupMutationObserver(): void {\r\n    const throttledInject = throttle(() => {\r\n      if (this.settings.enabled) {\r\n        this.injectTranslations();\r\n      }\r\n    }, 100);\r\n\r\n    this.observer = new MutationObserver((mutations) => {\r\n      let shouldReinject = false;\r\n\r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'childList') {\r\n          // 检查是否有新的表单元素被添加\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as Element;\r\n              if (this.isFormElement(element) || element.querySelector('input, label, select')) {\r\n                shouldReinject = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (shouldReinject) break;\r\n      }\r\n\r\n      if (shouldReinject) {\r\n        throttledInject();\r\n      }\r\n    });\r\n\r\n    this.observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 检查是否为表单相关元素\r\n   */\r\n  private isFormElement(element: Element): boolean {\r\n    const formTags = ['INPUT', 'LABEL', 'SELECT', 'TEXTAREA', 'FORM', 'FIELDSET'];\r\n    return formTags.includes(element.tagName);\r\n  }\r\n\r\n  /**\r\n   * 销毁注入器\r\n   */\r\n  destroy(): void {\r\n    if (this.observer) {\r\n      this.observer.disconnect();\r\n      this.observer = null;\r\n    }\r\n    this.removeAllTranslations();\r\n    this.injectedElements.clear();\r\n  }\r\n}\r\n","import type { TranslationSettings } from '@/shared/types';\r\nimport { getSettings, saveSettings } from '@/shared/storage';\r\n\r\nexport class TranslationUIController {\r\n  private container: HTMLElement | null = null;\r\n  private isCollapsed = false;\r\n  private settings: TranslationSettings;\r\n\r\n  constructor(settings: TranslationSettings) {\r\n    this.settings = settings;\r\n    this.createUI();\r\n  }\r\n\r\n  /**\r\n   * 创建UI控制器\r\n   */\r\n  private createUI(): void {\r\n    // 检查是否已存在\r\n    if (document.querySelector('.ds160-translation-controller')) {\r\n      return;\r\n    }\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'ds160-translation-controller';\r\n    this.container.innerHTML = this.getUIHTML();\r\n\r\n    // 添加事件监听器\r\n    this.attachEventListeners();\r\n\r\n    // 插入到页面\r\n    document.body.appendChild(this.container);\r\n\r\n    // 更新UI状态\r\n    this.updateUI();\r\n  }\r\n\r\n  /**\r\n   * 获取UI HTML结构\r\n   */\r\n  private getUIHTML(): string {\r\n    return `\r\n      <div class=\"ds160-translation-controller-header\">\r\n        <span>中文助手</span>\r\n        <button class=\"ds160-translation-controller-toggle\" data-action=\"toggle-collapse\">\r\n          ${this.isCollapsed ? '📖' : '📘'}\r\n        </button>\r\n      </div>\r\n      <div class=\"ds160-translation-controller-content\">\r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-enabled\">启用翻译</label>\r\n          <div class=\"ds160-translation-switch\" data-action=\"toggle-enabled\">\r\n            <input type=\"checkbox\" id=\"translation-enabled\" style=\"display: none;\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-mode\">显示模式</label>\r\n          <select class=\"ds160-translation-select\" data-action=\"change-mode\" id=\"translation-mode\">\r\n            <option value=\"brief\">简洁</option>\r\n            <option value=\"detailed\">详细</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"show-notes\">显示注释</label>\r\n          <div class=\"ds160-translation-switch\" data-action=\"toggle-notes\">\r\n            <input type=\"checkbox\" id=\"show-notes\" style=\"display: none;\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-position\">位置</label>\r\n          <select class=\"ds160-translation-select\" data-action=\"change-position\" id=\"translation-position\">\r\n            <option value=\"right\">右侧</option>\r\n            <option value=\"below\">下方</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-status\" id=\"translation-status\">\r\n          已准备就绪\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * 附加事件监听器\r\n   */\r\n  private attachEventListeners(): void {\r\n    if (!this.container) return;\r\n\r\n    // 使用事件委托处理所有点击事件\r\n    this.container.addEventListener('click', (event) => {\r\n      const target = event.target as HTMLElement;\r\n      const action = target.getAttribute('data-action') || target.closest('[data-action]')?.getAttribute('data-action');\r\n      \r\n      if (action) {\r\n        this.handleAction(action, target);\r\n      }\r\n    });\r\n\r\n    // 处理select变化事件\r\n    this.container.addEventListener('change', (event) => {\r\n      const target = event.target as HTMLSelectElement;\r\n      const action = target.getAttribute('data-action');\r\n      \r\n      if (action) {\r\n        this.handleAction(action, target);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理用户操作\r\n   */\r\n  private async handleAction(action: string, target: HTMLElement): Promise<void> {\r\n    try {\r\n      switch (action) {\r\n        case 'toggle-collapse':\r\n          this.toggleCollapse();\r\n          break;\r\n          \r\n        case 'toggle-enabled':\r\n          await this.toggleEnabled();\r\n          break;\r\n          \r\n        case 'toggle-notes':\r\n          await this.toggleNotes();\r\n          break;\r\n          \r\n        case 'change-mode':\r\n          await this.changeMode((target as HTMLSelectElement).value as 'brief' | 'detailed');\r\n          break;\r\n          \r\n        case 'change-position':\r\n          await this.changePosition((target as HTMLSelectElement).value as 'right' | 'below');\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling action:', action, error);\r\n      this.showStatus('操作失败', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换折叠状态\r\n   */\r\n  private toggleCollapse(): void {\r\n    this.isCollapsed = !this.isCollapsed;\r\n    \r\n    if (this.container) {\r\n      this.container.classList.toggle('collapsed', this.isCollapsed);\r\n      \r\n      const toggleButton = this.container.querySelector('.ds160-translation-controller-toggle');\r\n      if (toggleButton) {\r\n        toggleButton.textContent = this.isCollapsed ? '📖' : '📘';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换启用状态\r\n   */\r\n  private async toggleEnabled(): Promise<void> {\r\n    this.settings.enabled = !this.settings.enabled;\r\n    await saveSettings({ enabled: this.settings.enabled });\r\n    this.updateUI();\r\n    this.showStatus(this.settings.enabled ? '翻译已启用' : '翻译已禁用', 'success');\r\n  }\r\n\r\n  /**\r\n   * 切换注释显示\r\n   */\r\n  private async toggleNotes(): Promise<void> {\r\n    this.settings.showNotes = !this.settings.showNotes;\r\n    await saveSettings({ showNotes: this.settings.showNotes });\r\n    this.updateUI();\r\n    this.showStatus('设置已保存', 'success');\r\n  }\r\n\r\n  /**\r\n   * 更改显示模式\r\n   */\r\n  private async changeMode(mode: 'brief' | 'detailed'): Promise<void> {\r\n    this.settings.mode = mode;\r\n    await saveSettings({ mode });\r\n    this.showStatus(`已切换到${mode === 'brief' ? '简洁' : '详细'}模式`, 'success');\r\n  }\r\n\r\n  /**\r\n   * 更改位置\r\n   */\r\n  private async changePosition(position: 'right' | 'below'): Promise<void> {\r\n    this.settings.position = position;\r\n    await saveSettings({ position });\r\n    this.showStatus(`位置已设为${position === 'right' ? '右侧' : '下方'}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * 更新UI状态\r\n   */\r\n  private updateUI(): void {\r\n    if (!this.container) return;\r\n\r\n    // 更新启用状态开关\r\n    const enabledSwitch = this.container.querySelector('[data-action=\"toggle-enabled\"]');\r\n    enabledSwitch?.classList.toggle('active', this.settings.enabled);\r\n\r\n    // 更新注释开关\r\n    const notesSwitch = this.container.querySelector('[data-action=\"toggle-notes\"]');\r\n    notesSwitch?.classList.toggle('active', this.settings.showNotes);\r\n\r\n    // 更新模式选择\r\n    const modeSelect = this.container.querySelector('#translation-mode') as HTMLSelectElement;\r\n    if (modeSelect) {\r\n      modeSelect.value = this.settings.mode;\r\n    }\r\n\r\n    // 更新位置选择\r\n    const positionSelect = this.container.querySelector('#translation-position') as HTMLSelectElement;\r\n    if (positionSelect) {\r\n      positionSelect.value = this.settings.position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示状态消息\r\n   */\r\n  private showStatus(message: string, type: 'success' | 'error' | 'loading' = 'success'): void {\r\n    const statusElement = this.container?.querySelector('#translation-status');\r\n    if (statusElement) {\r\n      statusElement.textContent = message;\r\n      statusElement.className = `ds160-translation-status ${type}`;\r\n      \r\n      // 3秒后恢复默认状态\r\n      setTimeout(() => {\r\n        statusElement.textContent = '已准备就绪';\r\n        statusElement.className = 'ds160-translation-status';\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  updateSettings(settings: TranslationSettings): void {\r\n    this.settings = settings;\r\n    this.updateUI();\r\n  }\r\n\r\n  /**\r\n   * 销毁UI\r\n   */\r\n  destroy(): void {\r\n    if (this.container) {\r\n      this.container.remove();\r\n      this.container = null;\r\n    }\r\n  }\r\n}\r\n","import type { TranslationData } from '@/shared/types';\r\n\r\n// 翻译数据缓存\r\nconst translationCache = new Map<string, TranslationData>();\r\n\r\n/**\r\n * 加载翻译数据\r\n */\r\nexport async function loadTranslationData(pageId: string): Promise<TranslationData | null> {\r\n  // 检查缓存\r\n  if (translationCache.has(pageId)) {\r\n    return translationCache.get(pageId)!;\r\n  }\r\n\r\n  try {\r\n    // 根据页面ID确定数据文件\r\n    const dataFile = getDataFileForPage(pageId);\r\n    if (!dataFile) {\r\n      console.warn(`No translation data file for page: ${pageId}`);\r\n      return null;\r\n    }\r\n\r\n    // 加载数据文件\r\n    const response = await fetch(chrome.runtime.getURL(`assets/data/${dataFile}`));\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load translation data: ${response.status}`);\r\n    }\r\n\r\n    const data: TranslationData = await response.json();\r\n    \r\n    // 验证数据格式\r\n    if (!validateTranslationData(data)) {\r\n      throw new Error('Invalid translation data format');\r\n    }\r\n\r\n    // 缓存数据\r\n    translationCache.set(pageId, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error loading translation data:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 根据页面特征确定数据文件\r\n */\r\nfunction getDataFileForPage(pageId: string): string | null {\r\n  // 检查URL和页面内容确定数据文件\r\n  const url = window.location.href;\r\n  const pageContent = document.body.textContent || '';\r\n\r\n  // 个人信息页面\r\n  if (pageContent.includes('Surnames') && pageContent.includes('Given Names')) {\r\n    return 'translation-personal-info.json';\r\n  }\r\n\r\n  // 联系信息页面\r\n  if (pageContent.includes('Home Address') || pageContent.includes('Phone Number')) {\r\n    return 'translation-contact-info.json';\r\n  }\r\n\r\n  // 可以根据更多页面特征添加其他数据文件\r\n  // TODO: 添加更多页面的翻译数据文件\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * 验证翻译数据格式\r\n */\r\nfunction validateTranslationData(data: any): data is TranslationData {\r\n  return (\r\n    data &&\r\n    typeof data.version === 'string' &&\r\n    typeof data.pageId === 'string' &&\r\n    Array.isArray(data.fields) &&\r\n    data.fields.every((field: any) => \r\n      field.key &&\r\n      Array.isArray(field.selectors) &&\r\n      field.en &&\r\n      field.zh &&\r\n      ['brief', 'detailed'].includes(field.level)\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * 自动检测当前页面类型\r\n */\r\nexport function detectCurrentPage(): string {\r\n  const url = window.location.href;\r\n  const title = document.title;\r\n  const pageContent = document.body.textContent || '';\r\n\r\n  // 基于内容特征检测页面类型\r\n  if (pageContent.includes('Surnames') && pageContent.includes('Given Names')) {\r\n    return 'personalInfo';\r\n  }\r\n  \r\n  if (pageContent.includes('Home Address')) {\r\n    return 'contactInfo';\r\n  }\r\n\r\n  // 基于URL路径检测\r\n  if (url.includes('personal')) {\r\n    return 'personalInfo';\r\n  }\r\n  \r\n  if (url.includes('contact')) {\r\n    return 'contactInfo';\r\n  }\r\n\r\n  // 默认返回通用页面类型\r\n  return 'general';\r\n}\r\n\r\n/**\r\n * 清空翻译数据缓存\r\n */\r\nexport function clearTranslationCache(): void {\r\n  translationCache.clear();\r\n}\r\n","import { TranslationInjector } from './translation-injector';\r\nimport { TranslationUIController } from './ui-controller';\r\nimport { loadTranslationData, detectCurrentPage } from './translation-loader';\r\nimport { getSettings, onSettingsChange } from '@/shared/storage';\r\nimport { waitForDOM } from '@/shared/dom-utils';\r\n\r\n// 全局实例\r\nlet injector: TranslationInjector | null = null;\r\nlet uiController: TranslationUIController | null = null;\r\n\r\n/**\r\n * 初始化翻译功能\r\n */\r\nasync function initializeTranslation(): Promise<void> {\r\n  try {\r\n    console.log('DS-160 Chinese Helper: Initializing translation...');\r\n    \r\n    // 等待DOM加载完成\r\n    await waitForDOM();\r\n    \r\n    // 检测当前页面类型\r\n    const pageType = detectCurrentPage();\r\n    console.log(`Detected page type: ${pageType}`);\r\n    \r\n    // 加载设置\r\n    const settings = await getSettings();\r\n    console.log('Loaded settings:', settings);\r\n    \r\n    // 创建注入器\r\n    injector = new TranslationInjector(settings);\r\n    \r\n    // 创建UI控制器\r\n    uiController = new TranslationUIController(settings);\r\n    \r\n    // 加载翻译数据\r\n    const translationData = await loadTranslationData(pageType);\r\n    if (translationData) {\r\n      injector.setTranslationData(translationData);\r\n      console.log(`Loaded translation data for ${pageType}:`, translationData.fields.length, 'fields');\r\n      \r\n      // 开始注入翻译\r\n      if (settings.enabled) {\r\n        injector.injectTranslations();\r\n      }\r\n    } else {\r\n      console.warn('No translation data available for current page');\r\n    }\r\n    \r\n    // 监听设置变化\r\n    onSettingsChange((newSettings) => {\r\n      console.log('Settings updated:', newSettings);\r\n      if (injector) {\r\n        injector.updateSettings(newSettings);\r\n      }\r\n      if (uiController) {\r\n        uiController.updateSettings(newSettings);\r\n      }\r\n    });\r\n    \r\n    console.log('DS-160 Chinese Helper: Translation initialized successfully');\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to initialize translation:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 清理资源\r\n */\r\nfunction cleanup(): void {\r\n  if (injector) {\r\n    injector.destroy();\r\n    injector = null;\r\n  }\r\n  if (uiController) {\r\n    uiController.destroy();\r\n    uiController = null;\r\n  }\r\n}\r\n\r\n// 监听页面卸载事件\r\nwindow.addEventListener('beforeunload', cleanup);\r\n\r\n// 监听来自popup或background的消息\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  switch (message.type) {\r\n    case 'GET_TRANSLATION_STATUS':\r\n      sendResponse({\r\n        initialized: injector !== null,\r\n        enabled: injector ? true : false,\r\n        translatedCount: injector ? 0 : 0, // TODO: 从injector获取实际数量\r\n        pageType: detectCurrentPage()\r\n      });\r\n      break;\r\n      \r\n    case 'UPDATE_SETTINGS':\r\n      if (injector && message.settings) {\r\n        injector.updateSettings(message.settings);\r\n      }\r\n      if (uiController && message.settings) {\r\n        uiController.updateSettings(message.settings);\r\n      }\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    case 'REFRESH_TRANSLATION':\r\n      if (injector) {\r\n        injector.removeAllTranslations();\r\n        setTimeout(() => {\r\n          injector?.injectTranslations();\r\n        }, 100);\r\n      }\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    case 'TOGGLE_TRANSLATION':\r\n      if (injector) {\r\n        // 切换翻译显示状态的逻辑可以在这里实现\r\n        console.log('Toggle translation requested');\r\n      }\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    default:\r\n      console.warn('Unknown message type:', message.type);\r\n      sendResponse({ error: 'Unknown message type' });\r\n  }\r\n});\r\n\r\n// 启动初始化\r\ninitializeTranslation();\r\n\r\n// 导出供测试使用\r\nexport { initializeTranslation, cleanup };"],"names":[],"mappings":"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"}