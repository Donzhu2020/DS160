{"version":3,"file":"translation.js","sources":["../../src/shared/dom-utils.ts","../../src/content/translation/translation-injector.ts","../../src/content/translation/ui-controller.ts","../../src/content/translation/translation-loader.ts","../../src/content/translation/user-gesture-refresh.ts","../../src/content/translation/enhanced-form-protection.ts","../../src/content/translation/index.ts"],"sourcesContent":["// DOM操作工具函数\r\n\r\n/**\r\n * 通过多种选择器策略查找元素\r\n */\r\nexport function findElementBySelectors(selectors: string[]): Element | null {\r\n  for (const selector of selectors) {\r\n    try {\r\n          // 处理文本选择器 \"text:xxxxx\"\r\n    if (selector.startsWith('text:')) {\r\n      const text = selector.substring(5);\r\n        // 查找所有可能包含文本的元素\r\n        const elements = document.querySelectorAll('*');\r\n        let exactMatch = null;\r\n        let bestMatch = null;\r\n        \r\n        for (const el of elements) {\r\n          // 确保元素可见且有文本内容\r\n          if (el.textContent && el.offsetParent !== null) {\r\n            const textContent = el.textContent.trim();\r\n            \r\n            // 精确匹配 - 最高优先级\r\n            if (textContent === text) {\r\n              console.log(`✅ Found exact text match for \"${text}\":`, el.tagName, el.id, el.className);\r\n              exactMatch = el;\r\n              break;\r\n            }\r\n            \r\n            // 查找直接包含目标文本的最小元素（通常是标签）\r\n            if (textContent.includes(text)) {\r\n              // 优先选择较小的元素（更可能是直接的标签）\r\n              if (!bestMatch || textContent.length < bestMatch.textContent.length) {\r\n                // 排除过大的父容器\r\n                if (textContent.length < text.length * 2.5) {\r\n                  console.log(`📍 Found smaller container for \"${text}\":`, el.tagName, el.className, `\"${textContent.substring(0, 50)}\"`);\r\n                  bestMatch = el;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (exactMatch) return exactMatch;\r\n        if (bestMatch) {\r\n          console.log(`⚡ Using best match for \"${text}\":`, bestMatch.tagName, bestMatch.className);\r\n          return bestMatch;\r\n        }\r\n        console.log(`No element found for text: \"${text}\"`);\r\n        continue;\r\n      }\r\n\r\n      // 处理 :contains() 选择器\r\n      if (selector.includes(':contains(')) {\r\n        const match = selector.match(/^(.*?):contains\\(['\"]?(.*?)['\"]?\\)$/);\r\n        if (match) {\r\n          const [, baseSelector, containsText] = match;\r\n          const baseElements = baseSelector === '*' ? \r\n            document.querySelectorAll('*') : \r\n            document.querySelectorAll(baseSelector || '*');\r\n          \r\n          for (const el of baseElements) {\r\n            if (el.textContent?.includes(containsText)) {\r\n              return el;\r\n            }\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // 处理属性包含选择器 [attr*='value']\r\n      if (selector.includes('[') && selector.includes('*=')) {\r\n        const element = document.querySelector(selector);\r\n        if (element) {\r\n          return element;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // 标准CSS选择器\r\n      const element = document.querySelector(selector);\r\n      if (element) {\r\n        return element;\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Invalid selector: ${selector}`, error);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * 创建翻译注释元素\r\n */\r\nexport function createTranslationElement(\r\n  zh: string, \r\n  note: string, \r\n  showNote: boolean,\r\n  position: 'right' | 'below'\r\n): HTMLElement {\r\n  const container = document.createElement('div');\r\n  container.className = 'ds160-translation-container';\r\n  \r\n  // 使用Shadow DOM隔离样式\r\n  const shadow = container.attachShadow({ mode: 'open' });\r\n  \r\n  // 创建样式\r\n  const style = document.createElement('style');\r\n  style.textContent = `\r\n    .translation-wrapper {\r\n      display: inline !important;\r\n      margin-left: 8px !important;\r\n      margin-top: 0 !important;\r\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n      font-size: 13px;\r\n      line-height: 1.4;\r\n      vertical-align: baseline !important;\r\n      position: static !important;\r\n      float: none !important;\r\n      clear: none !important;\r\n    }\r\n    \r\n    .translation-text {\r\n      color: #666;\r\n      font-weight: 500;\r\n      background: rgba(59, 130, 246, 0.1);\r\n      padding: 1px 4px;\r\n      border-radius: 3px;\r\n      border: 1px solid rgba(59, 130, 246, 0.2);\r\n      display: inline;\r\n      white-space: normal;\r\n      word-wrap: break-word;\r\n      max-width: 300px;\r\n      font-size: 12px;\r\n    }\r\n    \r\n    .translation-note {\r\n      color: #888;\r\n      font-size: 11px;\r\n      margin-top: 2px;\r\n      padding: 2px 4px;\r\n      background: rgba(156, 163, 175, 0.1);\r\n      border-radius: 3px;\r\n      border-left: 2px solid #e5e7eb;\r\n      display: ${showNote ? 'block' : 'none'};\r\n    }\r\n    \r\n    .translation-wrapper:hover .translation-note {\r\n      display: block;\r\n    }\r\n  `;\r\n  \r\n  // 创建内容\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'translation-wrapper';\r\n  \r\n  const textSpan = document.createElement('span');\r\n  textSpan.className = 'translation-text';\r\n  textSpan.textContent = zh;\r\n  \r\n  const noteDiv = document.createElement('div');\r\n  noteDiv.className = 'translation-note';\r\n  noteDiv.textContent = note;\r\n  \r\n  shadow.appendChild(style);\r\n  shadow.appendChild(wrapper);\r\n  wrapper.appendChild(textSpan);\r\n  if (note) {\r\n    wrapper.appendChild(noteDiv);\r\n  }\r\n  \r\n  return container;\r\n}\r\n\r\n/**\r\n * 检查元素是否已经注入翻译\r\n */\r\nexport function hasTranslation(element: Element): boolean {\r\n  // 检查元素是否有特定的翻译标记\r\n  if (element.hasAttribute('data-ds160-translated')) {\r\n    return true;\r\n  }\r\n  \r\n  const elementText = element.textContent?.trim() || '';\r\n  if (!elementText) return false;\r\n  \r\n  // 检查紧邻的下一个兄弟元素是否是翻译容器\r\n  const nextSibling = element.nextElementSibling;\r\n  if (nextSibling && nextSibling.classList.contains('ds160-translation-container')) {\r\n    return true;\r\n  }\r\n  \r\n  // 检查父元素中所有翻译容器\r\n  const parent = element.parentElement;\r\n  if (parent) {\r\n    const existingTranslations = parent.querySelectorAll('.ds160-translation-container');\r\n    for (const translation of existingTranslations) {\r\n      const forElement = (translation as HTMLElement).getAttribute('data-for-element');\r\n      if (forElement && forElement.includes(elementText.substring(0, 15))) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 检查周围的翻译包装器（用于绝对定位的情况）\r\n  const wrapper = element.closest('span[style*=\"position: relative\"]');\r\n  if (wrapper && wrapper.querySelector('.ds160-translation-container')) {\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * 移除已注入的翻译\r\n */\r\nexport function removeTranslation(element: Element): void {\r\n  // 移除翻译标记\r\n  element.removeAttribute('data-ds160-translated');\r\n  \r\n  const elementText = element.textContent?.trim() || '';\r\n  if (!elementText) return;\r\n  \r\n  // 检查紧邻的下一个兄弟元素\r\n  const nextSibling = element.nextElementSibling;\r\n  if (nextSibling && nextSibling.classList.contains('ds160-translation-container')) {\r\n    nextSibling.remove();\r\n  }\r\n  \r\n  // 检查父元素中的所有翻译容器\r\n  const parent = element.parentElement;\r\n  if (parent) {\r\n    const translationContainers = parent.querySelectorAll('.ds160-translation-container');\r\n    for (const container of translationContainers) {\r\n      const forElement = (container as HTMLElement).getAttribute('data-for-element');\r\n      if (forElement && forElement.includes(elementText.substring(0, 15))) {\r\n        container.remove();\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 检查绝对定位包装器中的翻译\r\n  const wrapper = element.closest('span[style*=\"position: relative\"]');\r\n  if (wrapper) {\r\n    const translationsInWrapper = wrapper.querySelectorAll('.ds160-translation-container');\r\n    translationsInWrapper.forEach(t => t.remove());\r\n  }\r\n  \r\n  // 清理可能在元素内部的翻译\r\n  const internalTranslations = element.querySelectorAll('.ds160-translation-container');\r\n  internalTranslations.forEach(t => t.remove());\r\n}\r\n\r\n/**\r\n * 等待DOM加载完成\r\n */\r\nexport function waitForDOM(): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    if (document.readyState === 'loading') {\r\n      document.addEventListener('DOMContentLoaded', () => resolve());\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 节流函数\r\n */\r\nexport function throttle<T extends (...args: any[]) => void>(\r\n  func: T,\r\n  delay: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeoutId: number | null = null;\r\n  let lastExecTime = 0;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    const currentTime = Date.now();\r\n    \r\n    if (currentTime - lastExecTime > delay) {\r\n      func(...args);\r\n      lastExecTime = currentTime;\r\n    } else {\r\n      if (timeoutId) {\r\n        clearTimeout(timeoutId);\r\n      }\r\n      timeoutId = window.setTimeout(() => {\r\n        func(...args);\r\n        lastExecTime = Date.now();\r\n        timeoutId = null;\r\n      }, delay - (currentTime - lastExecTime));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 保存表单数据到sessionStorage\r\n */\r\nexport function saveFormData(): void {\r\n  const formData: { [key: string]: string } = {};\r\n  \r\n  try {\r\n    // 保存所有表单元素的数据\r\n    document.querySelectorAll('input, select, textarea').forEach((element) => {\r\n      const formElement = element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n      \r\n      // 使用多种策略生成唯一标识符\r\n      const identifier = getElementIdentifier(formElement);\r\n      if (!identifier) return;\r\n      \r\n      if (formElement instanceof HTMLInputElement) {\r\n        if (formElement.type === 'checkbox' || formElement.type === 'radio') {\r\n          formData[identifier] = formElement.checked ? 'checked' : 'unchecked';\r\n        } else {\r\n          formData[identifier] = formElement.value;\r\n        }\r\n      } else if (formElement instanceof HTMLSelectElement) {\r\n        formData[identifier] = formElement.value;\r\n        // 同时保存选中的索引，以备value不可用时使用\r\n        formData[identifier + '_selectedIndex'] = formElement.selectedIndex.toString();\r\n      } else if (formElement instanceof HTMLTextAreaElement) {\r\n        formData[identifier] = formElement.value;\r\n      }\r\n    });\r\n    \r\n    // 保存到sessionStorage\r\n    sessionStorage.setItem('ds160_form_data', JSON.stringify(formData));\r\n    console.log('Form data saved successfully:', Object.keys(formData).length, 'fields');\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to save form data:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 从sessionStorage恢复表单数据\r\n */\r\nexport function restoreFormData(): void {\r\n  try {\r\n    const savedData = sessionStorage.getItem('ds160_form_data');\r\n    if (!savedData) {\r\n      console.log('No saved form data found');\r\n      return;\r\n    }\r\n    \r\n    const formData = JSON.parse(savedData);\r\n    let restoredCount = 0;\r\n    \r\n    // 恢复所有表单元素的数据\r\n    document.querySelectorAll('input, select, textarea').forEach((element) => {\r\n      const formElement = element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n      \r\n      const identifier = getElementIdentifier(formElement);\r\n      if (!identifier || formData[identifier] === undefined) return;\r\n      \r\n      try {\r\n        if (formElement instanceof HTMLInputElement) {\r\n          if (formElement.type === 'checkbox' || formElement.type === 'radio') {\r\n            formElement.checked = formData[identifier] === 'checked';\r\n          } else {\r\n            formElement.value = formData[identifier];\r\n          }\r\n          restoredCount++;\r\n        } else if (formElement instanceof HTMLSelectElement) {\r\n          // 优先使用value，失败时使用selectedIndex\r\n          if (formData[identifier]) {\r\n            formElement.value = formData[identifier];\r\n          } else if (formData[identifier + '_selectedIndex']) {\r\n            const selectedIndex = parseInt(formData[identifier + '_selectedIndex']);\r\n            if (selectedIndex >= 0 && selectedIndex < formElement.options.length) {\r\n              formElement.selectedIndex = selectedIndex;\r\n            }\r\n          }\r\n          restoredCount++;\r\n        } else if (formElement instanceof HTMLTextAreaElement) {\r\n          formElement.value = formData[identifier];\r\n          restoredCount++;\r\n        }\r\n        \r\n        // 触发change事件，确保页面逻辑能正确响应\r\n        formElement.dispatchEvent(new Event('change', { bubbles: true }));\r\n        \r\n      } catch (error) {\r\n        console.warn('Failed to restore data for element:', identifier, error);\r\n      }\r\n    });\r\n    \r\n    console.log('Form data restored successfully:', restoredCount, 'fields');\r\n    \r\n    // 恢复完成后清理旧数据\r\n    sessionStorage.removeItem('ds160_form_data');\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to restore form data:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 为表单元素生成唯一标识符\r\n */\r\nfunction getElementIdentifier(element: HTMLElement): string | null {\r\n  // 优先使用name属性\r\n  if (element.getAttribute('name')) {\r\n    return `name:${element.getAttribute('name')}`;\r\n  }\r\n  \r\n  // 使用id属性\r\n  if (element.id) {\r\n    return `id:${element.id}`;\r\n  }\r\n  \r\n  // 使用data-*属性\r\n  for (const attr of element.attributes) {\r\n    if (attr.name.startsWith('data-') && attr.value) {\r\n      return `${attr.name}:${attr.value}`;\r\n    }\r\n  }\r\n  \r\n  // 使用标签名和文本内容组合\r\n  const label = findLabelForElement(element);\r\n  if (label) {\r\n    return `label:${label}`;\r\n  }\r\n  \r\n  // 使用相对位置（最后的备选方案）\r\n  const parent = element.parentElement;\r\n  if (parent) {\r\n    const siblings = Array.from(parent.children).filter(el => el.tagName === element.tagName);\r\n    const index = siblings.indexOf(element);\r\n    return `position:${element.tagName.toLowerCase()}_${index}`;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n/**\r\n * 查找与表单元素关联的标签文本\r\n */\r\nfunction findLabelForElement(element: HTMLElement): string | null {\r\n  // 查找通过for属性关联的label\r\n  if (element.id) {\r\n    const label = document.querySelector(`label[for=\"${element.id}\"]`);\r\n    if (label && label.textContent) {\r\n      return label.textContent.trim();\r\n    }\r\n  }\r\n  \r\n  // 查找父级label\r\n  const parentLabel = element.closest('label');\r\n  if (parentLabel && parentLabel.textContent) {\r\n    return parentLabel.textContent.trim();\r\n  }\r\n  \r\n  // 查找前面的兄弟元素中的标签文本\r\n  let sibling = element.previousElementSibling;\r\n  while (sibling) {\r\n    if (sibling.tagName === 'LABEL' && sibling.textContent) {\r\n      return sibling.textContent.trim();\r\n    }\r\n    if (sibling.textContent && sibling.textContent.trim().length < 100) {\r\n      return sibling.textContent.trim();\r\n    }\r\n    sibling = sibling.previousElementSibling;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n/**\r\n * 清理已保存的表单数据\r\n */\r\nexport function clearSavedFormData(): void {\r\n  try {\r\n    sessionStorage.removeItem('ds160_form_data');\r\n    console.log('Saved form data cleared');\r\n  } catch (error) {\r\n    console.error('Failed to clear saved form data:', error);\r\n  }\r\n}\r\n","import type { TranslationData, TranslationField, TranslationSettings } from '@/shared/types';\r\nimport { \r\n  findElementBySelectors, \r\n  createTranslationElement, \r\n  hasTranslation, \r\n  removeTranslation,\r\n  throttle \r\n} from '@/shared/dom-utils';\r\n\r\nexport class TranslationInjector {\r\n  private translationData: TranslationData | null = null;\r\n  private settings: TranslationSettings;\r\n  private observer: MutationObserver | null = null;\r\n  private injectedElements = new Set<Element>();\r\n\r\n  constructor(settings: TranslationSettings) {\r\n    this.settings = settings;\r\n    this.setupMutationObserver();\r\n  }\r\n\r\n  /**\r\n   * 设置翻译数据\r\n   */\r\n  setTranslationData(data: TranslationData): void {\r\n    this.translationData = data;\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  updateSettings(settings: TranslationSettings): void {\r\n    this.settings = settings;\r\n    \r\n    if (settings.enabled) {\r\n      this.injectTranslations();\r\n    } else {\r\n      this.removeAllTranslations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注入所有翻译\r\n   */\r\n  injectTranslations(): void {\r\n    if (!this.translationData || !this.settings.enabled) {\r\n      return;\r\n    }\r\n\r\n    let injectedCount = 0;\r\n    const startTime = performance.now();\r\n\r\n    for (const field of this.translationData.fields) {\r\n      // 检查字段级别是否匹配当前模式\r\n      if (!this.shouldInjectField(field)) {\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        const success = this.injectFieldTranslation(field);\r\n        if (success) {\r\n          injectedCount++;\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to inject translation for field ${field.key}:`, error);\r\n      }\r\n    }\r\n\r\n    const duration = performance.now() - startTime;\r\n    console.log(`Injected ${injectedCount} translations in ${duration.toFixed(2)}ms`);\r\n  }\r\n\r\n  /**\r\n   * 注入单个字段的翻译\r\n   */\r\n  private injectFieldTranslation(field: TranslationField): boolean {\r\n    const targetElement = findElementBySelectors(field.selectors);\r\n    if (!targetElement) {\r\n      return false;\r\n    }\r\n\r\n    // 检查是否已经注入\r\n    if (hasTranslation(targetElement)) {\r\n      return false;\r\n    }\r\n\r\n    // 根据当前模式选择翻译文本和注释，支持新旧格式\r\n    const currentMode = this.settings.mode;\r\n    let translationText: string;\r\n    let noteText: string;\r\n\r\n    // 处理翻译文本（支持新旧格式）\r\n    if (typeof field.zh === 'object') {\r\n      // 新格式：对象形式，优先使用当前模式，如果为空则使用另一个模式\r\n      translationText = field.zh[currentMode];\r\n      if (!translationText || translationText.trim() === '') {\r\n        translationText = currentMode === 'brief' ? field.zh.detailed : field.zh.brief;\r\n      }\r\n    } else {\r\n      // 旧格式：字符串形式\r\n      translationText = field.zh;\r\n    }\r\n\r\n    // 处理注释文本（支持新旧格式）\r\n    if (field.note && typeof field.note === 'object') {\r\n      // 新格式：对象形式\r\n      noteText = field.note[currentMode] || field.note.brief;\r\n    } else {\r\n      // 旧格式：字符串形式或undefined\r\n      noteText = field.note || '';\r\n    }\r\n\r\n    // 如果翻译文本为空，跳过该字段\r\n    if (!translationText || translationText.trim() === '') {\r\n      return false;\r\n    }\r\n\r\n    // 创建翻译元素\r\n    const translationElement = createTranslationElement(\r\n      translationText,\r\n      noteText,\r\n      this.settings.showNotes && noteText.trim() !== '',\r\n      this.settings.position\r\n    );\r\n\r\n    // 注入翻译\r\n    this.insertTranslationElement(targetElement, translationElement);\r\n    this.injectedElements.add(targetElement);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 插入翻译元素到适当位置\r\n   */\r\n  private insertTranslationElement(targetElement: Element, translationElement: HTMLElement): void {\r\n    const parent = targetElement.parentElement;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    // 特殊处理：对于包含标签文本的DIV，尝试在文本后面内联插入\r\n    const tagName = targetElement.tagName.toLowerCase();\r\n    if (tagName === 'div' && targetElement.classList.contains('field')) {\r\n      // 查找DIV内的文本节点\r\n      const textNodes = Array.from(targetElement.childNodes).filter(node => \r\n        node.nodeType === Node.TEXT_NODE && node.textContent?.trim()\r\n      );\r\n      \r\n      if (textNodes.length > 0) {\r\n        const lastTextNode = textNodes[textNodes.length - 1];\r\n        if (lastTextNode.textContent?.trim()) {\r\n          try {\r\n            // 在文本节点后插入翻译，实现内联效果\r\n            const textSpan = document.createElement('span');\r\n            textSpan.textContent = lastTextNode.textContent;\r\n            \r\n            translationElement.style.cssText = `\r\n              display: inline !important;\r\n              margin-left: 4px !important;\r\n              background: rgba(34, 197, 94, 0.1) !important;\r\n              color: #059669 !important;\r\n              padding: 1px 3px !important;\r\n              border-radius: 2px !important;\r\n              font-size: 10px !important;\r\n              font-weight: 500 !important;\r\n              white-space: nowrap !important;\r\n            `;\r\n            \r\n            // 替换文本节点为 文本+翻译\r\n            lastTextNode.replaceWith(textSpan, translationElement);\r\n            console.log('🎯 Inline text replacement for field div');\r\n            return;\r\n          } catch (error) {\r\n            console.warn('Failed to insert inline translation:', error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.settings.position === 'right') {\r\n      // 在目标元素后插入\r\n      targetElement.insertAdjacentElement('afterend', translationElement);\r\n    } else {\r\n      // 在父容器末尾插入\r\n      parent.appendChild(translationElement);\r\n    }\r\n\r\n    // 为可访问性添加关联\r\n    if (targetElement.id) {\r\n      translationElement.setAttribute('aria-labelledby', targetElement.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断是否应该注入字段翻译\r\n   */\r\n  private shouldInjectField(field: TranslationField): boolean {\r\n    // 根据设置模式过滤字段\r\n    if (this.settings.mode === 'brief' && field.level === 'detailed') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 移除所有翻译\r\n   */\r\n  removeAllTranslations(): void {\r\n    for (const element of this.injectedElements) {\r\n      removeTranslation(element);\r\n    }\r\n    this.injectedElements.clear();\r\n  }\r\n\r\n  /**\r\n   * 设置DOM变化监听器\r\n   */\r\n  private setupMutationObserver(): void {\r\n    const throttledInject = throttle(() => {\r\n      if (this.settings.enabled) {\r\n        this.injectTranslations();\r\n      }\r\n    }, 100);\r\n\r\n    this.observer = new MutationObserver((mutations) => {\r\n      let shouldReinject = false;\r\n\r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'childList') {\r\n          // 检查是否有新的表单元素被添加\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as Element;\r\n              if (this.isFormElement(element) || element.querySelector('input, label, select')) {\r\n                shouldReinject = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (shouldReinject) break;\r\n      }\r\n\r\n      if (shouldReinject) {\r\n        throttledInject();\r\n      }\r\n    });\r\n\r\n    this.observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 检查是否为表单相关元素\r\n   */\r\n  private isFormElement(element: Element): boolean {\r\n    const formTags = ['INPUT', 'LABEL', 'SELECT', 'TEXTAREA', 'FORM', 'FIELDSET'];\r\n    return formTags.includes(element.tagName);\r\n  }\r\n\r\n  /**\r\n   * 销毁注入器\r\n   */\r\n  destroy(): void {\r\n    if (this.observer) {\r\n      this.observer.disconnect();\r\n      this.observer = null;\r\n    }\r\n    this.removeAllTranslations();\r\n    this.injectedElements.clear();\r\n  }\r\n}\r\n","import type { TranslationSettings } from '@/shared/types';\r\nimport { getSettings, saveSettings } from '@/shared/storage';\r\n\r\nexport class TranslationUIController {\r\n  private container: HTMLElement | null = null;\r\n  private isCollapsed = false;\r\n  private settings: TranslationSettings;\r\n\r\n  constructor(settings: TranslationSettings) {\r\n    this.settings = settings;\r\n    this.createUI();\r\n  }\r\n\r\n  /**\r\n   * 创建UI控制器\r\n   */\r\n  private createUI(): void {\r\n    // 检查是否已存在\r\n    if (document.querySelector('.ds160-translation-controller')) {\r\n      return;\r\n    }\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'ds160-translation-controller';\r\n    this.container.innerHTML = this.getUIHTML();\r\n\r\n    // 添加事件监听器\r\n    this.attachEventListeners();\r\n\r\n    // 插入到页面\r\n    document.body.appendChild(this.container);\r\n\r\n    // 更新UI状态\r\n    this.updateUI();\r\n  }\r\n\r\n  /**\r\n   * 获取UI HTML结构\r\n   */\r\n  private getUIHTML(): string {\r\n    return `\r\n      <div class=\"ds160-translation-controller-header\">\r\n        <span>中文助手</span>\r\n        <button class=\"ds160-translation-controller-toggle\" data-action=\"toggle-collapse\">\r\n          ${this.isCollapsed ? '📖' : '📘'}\r\n        </button>\r\n      </div>\r\n      <div class=\"ds160-translation-controller-content\">\r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-enabled\">启用翻译</label>\r\n          <div class=\"ds160-translation-switch\" data-action=\"toggle-enabled\">\r\n            <input type=\"checkbox\" id=\"translation-enabled\" style=\"display: none;\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-mode\">显示模式</label>\r\n          <select class=\"ds160-translation-select\" data-action=\"change-mode\" id=\"translation-mode\">\r\n            <option value=\"brief\">简洁</option>\r\n            <option value=\"detailed\">详细</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"show-notes\">显示注释</label>\r\n          <div class=\"ds160-translation-switch\" data-action=\"toggle-notes\">\r\n            <input type=\"checkbox\" id=\"show-notes\" style=\"display: none;\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-option\">\r\n          <label for=\"translation-position\">位置</label>\r\n          <select class=\"ds160-translation-select\" data-action=\"change-position\" id=\"translation-position\">\r\n            <option value=\"right\">右侧</option>\r\n            <option value=\"below\">下方</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"ds160-translation-status\" id=\"translation-status\">\r\n          已准备就绪\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * 附加事件监听器\r\n   */\r\n  private attachEventListeners(): void {\r\n    if (!this.container) return;\r\n\r\n    // 使用事件委托处理所有点击事件\r\n    this.container.addEventListener('click', (event) => {\r\n      const target = event.target as HTMLElement;\r\n      const action = target.getAttribute('data-action') || target.closest('[data-action]')?.getAttribute('data-action');\r\n      \r\n      if (action) {\r\n        this.handleAction(action, target);\r\n      }\r\n    });\r\n\r\n    // 处理select变化事件\r\n    this.container.addEventListener('change', (event) => {\r\n      const target = event.target as HTMLSelectElement;\r\n      const action = target.getAttribute('data-action');\r\n      \r\n      if (action) {\r\n        this.handleAction(action, target);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理用户操作\r\n   */\r\n  private async handleAction(action: string, target: HTMLElement): Promise<void> {\r\n    try {\r\n      switch (action) {\r\n        case 'toggle-collapse':\r\n          this.toggleCollapse();\r\n          break;\r\n          \r\n        case 'toggle-enabled':\r\n          await this.toggleEnabled();\r\n          break;\r\n          \r\n        case 'toggle-notes':\r\n          await this.toggleNotes();\r\n          break;\r\n          \r\n        case 'change-mode':\r\n          await this.changeMode((target as HTMLSelectElement).value as 'brief' | 'detailed');\r\n          break;\r\n          \r\n        case 'change-position':\r\n          await this.changePosition((target as HTMLSelectElement).value as 'right' | 'below');\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling action:', action, error);\r\n      this.showStatus('操作失败', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换折叠状态\r\n   */\r\n  private toggleCollapse(): void {\r\n    this.isCollapsed = !this.isCollapsed;\r\n    \r\n    if (this.container) {\r\n      this.container.classList.toggle('collapsed', this.isCollapsed);\r\n      \r\n      const toggleButton = this.container.querySelector('.ds160-translation-controller-toggle');\r\n      if (toggleButton) {\r\n        toggleButton.textContent = this.isCollapsed ? '📖' : '📘';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换启用状态\r\n   */\r\n  private async toggleEnabled(): Promise<void> {\r\n    this.settings.enabled = !this.settings.enabled;\r\n    await saveSettings({ enabled: this.settings.enabled });\r\n    this.updateUI();\r\n    this.showStatus(this.settings.enabled ? '翻译已启用' : '翻译已禁用', 'success');\r\n  }\r\n\r\n  /**\r\n   * 切换注释显示\r\n   */\r\n  private async toggleNotes(): Promise<void> {\r\n    this.settings.showNotes = !this.settings.showNotes;\r\n    await saveSettings({ showNotes: this.settings.showNotes });\r\n    this.updateUI();\r\n    this.showStatus('设置已保存', 'success');\r\n  }\r\n\r\n  /**\r\n   * 更改显示模式\r\n   */\r\n  private async changeMode(mode: 'brief' | 'detailed'): Promise<void> {\r\n    this.settings.mode = mode;\r\n    await saveSettings({ mode });\r\n    this.showStatus(`已切换到${mode === 'brief' ? '简洁' : '详细'}模式`, 'success');\r\n  }\r\n\r\n  /**\r\n   * 更改位置\r\n   */\r\n  private async changePosition(position: 'right' | 'below'): Promise<void> {\r\n    this.settings.position = position;\r\n    await saveSettings({ position });\r\n    this.showStatus(`位置已设为${position === 'right' ? '右侧' : '下方'}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * 更新UI状态\r\n   */\r\n  private updateUI(): void {\r\n    if (!this.container) return;\r\n\r\n    // 更新启用状态开关\r\n    const enabledSwitch = this.container.querySelector('[data-action=\"toggle-enabled\"]');\r\n    enabledSwitch?.classList.toggle('active', this.settings.enabled);\r\n\r\n    // 更新注释开关\r\n    const notesSwitch = this.container.querySelector('[data-action=\"toggle-notes\"]');\r\n    notesSwitch?.classList.toggle('active', this.settings.showNotes);\r\n\r\n    // 更新模式选择\r\n    const modeSelect = this.container.querySelector('#translation-mode') as HTMLSelectElement;\r\n    if (modeSelect) {\r\n      modeSelect.value = this.settings.mode;\r\n    }\r\n\r\n    // 更新位置选择\r\n    const positionSelect = this.container.querySelector('#translation-position') as HTMLSelectElement;\r\n    if (positionSelect) {\r\n      positionSelect.value = this.settings.position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示状态消息\r\n   */\r\n  private showStatus(message: string, type: 'success' | 'error' | 'loading' = 'success'): void {\r\n    const statusElement = this.container?.querySelector('#translation-status');\r\n    if (statusElement) {\r\n      statusElement.textContent = message;\r\n      statusElement.className = `ds160-translation-status ${type}`;\r\n      \r\n      // 3秒后恢复默认状态\r\n      setTimeout(() => {\r\n        statusElement.textContent = '已准备就绪';\r\n        statusElement.className = 'ds160-translation-status';\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  updateSettings(settings: TranslationSettings): void {\r\n    this.settings = settings;\r\n    this.updateUI();\r\n  }\r\n\r\n  /**\r\n   * 销毁UI\r\n   */\r\n  destroy(): void {\r\n    if (this.container) {\r\n      this.container.remove();\r\n      this.container = null;\r\n    }\r\n  }\r\n}\r\n","import type { TranslationData, TranslationField } from '@/shared/types';\r\n\r\n// 翻译数据缓存\r\nconst translationCache = new Map<string, TranslationData>();\r\n\r\n// 合并翻译数据缓存\r\nconst mergedTranslationCache = new Map<string, TranslationData>();\r\n\r\n// 页面关联映射 - 某个页面可能需要其他页面的翻译数据\r\nconst pageAssociations: Record<string, string[]> = {\r\n  'page1': ['page1'], // 暂时只加载自己，减少干扰\r\n  'page2': ['page2'], // 暂时只加载自己\r\n  'page3': ['page3'], // 暂时只加载page3，确保精确度\r\n  'page4': ['page4'], // 暂时只加载自己\r\n  'page5': ['page5'], // 暂时只加载自己\r\n  // 为其他页面添加默认关联（只加载自己）\r\n  'page6': ['page6'], 'page7': ['page7'], 'page8': ['page8'],\r\n  'page9': ['page9'], 'page10': ['page10'], 'page11': ['page11'],\r\n  'page12': ['page12'], 'page13': ['page13'], 'page14': ['page14'],\r\n  'page15': ['page15'], 'page16': ['page16'], 'page17': ['page17'],\r\n  'page18': ['page18']\r\n};\r\n\r\n/**\r\n * 加载多页面合并的翻译数据（新的主要接口）\r\n */\r\nexport async function loadMergedTranslationData(pageId: string): Promise<TranslationData | null> {\r\n  // 检查合并数据缓存\r\n  if (mergedTranslationCache.has(pageId)) {\r\n    return mergedTranslationCache.get(pageId)!;\r\n  }\r\n\r\n  try {\r\n    // 获取关联页面列表\r\n    const associatedPages = pageAssociations[pageId] || [pageId];\r\n    console.log(`Loading translation data for ${pageId} and associated pages:`, associatedPages);\r\n\r\n    // 加载所有关联页面的翻译数据\r\n    const translationDataList: TranslationData[] = [];\r\n    for (const pageToLoad of associatedPages) {\r\n      const data = await loadTranslationData(pageToLoad);\r\n      if (data) {\r\n        translationDataList.push(data);\r\n      }\r\n    }\r\n\r\n    if (translationDataList.length === 0) {\r\n      console.warn(`No translation data loaded for page ${pageId} and its associations`);\r\n      return null;\r\n    }\r\n\r\n    // 合并所有翻译数据\r\n    const mergedData = mergeTranslationData(pageId, translationDataList);\r\n    \r\n    // 缓存合并后的数据\r\n    mergedTranslationCache.set(pageId, mergedData);\r\n    return mergedData;\r\n  } catch (error) {\r\n    console.error('Error loading merged translation data:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 加载单个页面的翻译数据\r\n */\r\nexport async function loadTranslationData(pageId: string): Promise<TranslationData | null> {\r\n  // 检查缓存\r\n  if (translationCache.has(pageId)) {\r\n    return translationCache.get(pageId)!;\r\n  }\r\n\r\n  try {\r\n    // 根据页面ID确定数据文件\r\n    const dataFile = getDataFileForPage(pageId);\r\n    if (!dataFile) {\r\n      console.warn(`No translation data file for page: ${pageId}`);\r\n      return null;\r\n    }\r\n\r\n    // 加载数据文件\r\n    const response = await fetch(chrome.runtime.getURL(`assets/data/${dataFile}`));\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load translation data: ${response.status}`);\r\n    }\r\n\r\n    const data: TranslationData = await response.json();\r\n    \r\n    // 验证数据格式\r\n    if (!validateTranslationData(data)) {\r\n      throw new Error('Invalid translation data format');\r\n    }\r\n\r\n    // 缓存数据\r\n    translationCache.set(pageId, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error loading translation data:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 合并多个页面的翻译数据\r\n */\r\nfunction mergeTranslationData(primaryPageId: string, translationDataList: TranslationData[]): TranslationData {\r\n  if (translationDataList.length === 0) {\r\n    throw new Error('Cannot merge empty translation data list');\r\n  }\r\n\r\n  // 使用第一个（主要页面）作为基础\r\n  const primaryData = translationDataList[0];\r\n  const mergedFields: TranslationField[] = [...primaryData.fields];\r\n  \r\n  // 合并其他页面的字段，避免重复的key\r\n  const existingKeys = new Set(primaryData.fields.map(field => field.key));\r\n  \r\n  for (let i = 1; i < translationDataList.length; i++) {\r\n    const additionalData = translationDataList[i];\r\n    for (const field of additionalData.fields) {\r\n      if (!existingKeys.has(field.key)) {\r\n        mergedFields.push(field);\r\n        existingKeys.add(field.key);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(`Merged translation data: ${mergedFields.length} total fields from ${translationDataList.length} pages`);\r\n\r\n  return {\r\n    version: primaryData.version,\r\n    pageId: primaryPageId,\r\n    description: `${primaryData.description} (merged with ${translationDataList.length - 1} additional pages)`,\r\n    fields: mergedFields\r\n  };\r\n}\r\n\r\n/**\r\n * 根据页面特征确定数据文件\r\n */\r\nfunction getDataFileForPage(pageId: string): string | null {\r\n  // 首先尝试根据检测到的页面ID直接匹配文件\r\n  if (pageId.startsWith('page') && pageId.match(/^page\\d+$/)) {\r\n    const pageNumber = pageId.replace('page', '').padStart(2, '0');\r\n    return `pages/translation-page${pageNumber}.json`;\r\n  }\r\n\r\n  // 兼容旧的页面ID格式\r\n  const legacyFileMap: Record<string, string> = {\r\n    'personalInfo': 'translation-personal-info.json',\r\n    'personalInfo1': 'translation-personal-info.json',\r\n    'contactInfo': 'translation-contact-info.json',\r\n    'general': 'pages/translation-page01.json' // 默认使用第一页\r\n  };\r\n\r\n  if (legacyFileMap[pageId]) {\r\n    return legacyFileMap[pageId];\r\n  }\r\n\r\n  // 后备检测：基于页面内容特征\r\n  const url = window.location.href;\r\n  const pageContent = document.body.textContent || '';\r\n\r\n  // 尝试根据页面内容匹配到对应的页面文件\r\n  const contentPatterns = [\r\n    { pattern: /Surnames.*Given Names/i, file: 'pages/translation-page01.json' },\r\n    { pattern: /Nationality.*National.*Identification/i, file: 'pages/translation-page02.json' },\r\n    { pattern: /Travel.*Information.*Address.*stay/i, file: 'pages/translation-page03.json' },\r\n    { pattern: /Travel.*Companions/i, file: 'pages/translation-page04.json' },\r\n    { pattern: /Previous.*US.*Travel/i, file: 'pages/translation-page05.json' },\r\n    { pattern: /Point.*Contact.*Information/i, file: 'pages/translation-page06.json' },\r\n    { pattern: /Family.*Information.*Relatives/i, file: 'pages/translation-page07.json' },\r\n    { pattern: /Family.*Information.*Spouse/i, file: 'pages/translation-page08.json' },\r\n    { pattern: /Work.*Education.*Training.*Information/i, file: 'pages/translation-page09.json' },\r\n    { pattern: /Security.*Background.*Part\\s*1/i, file: 'pages/translation-page12.json' },\r\n    { pattern: /Security.*Background.*Part\\s*2/i, file: 'pages/translation-page13.json' },\r\n    { pattern: /Security.*Background.*Part\\s*3/i, file: 'pages/translation-page14.json' },\r\n    { pattern: /Security.*Background.*Part\\s*4/i, file: 'pages/translation-page15.json' },\r\n    { pattern: /Security.*Background.*Part\\s*5/i, file: 'pages/translation-page16.json' },\r\n    { pattern: /SEVIS.*Information/i, file: 'pages/translation-page17.json' },\r\n    { pattern: /Upload.*Photo/i, file: 'pages/translation-page18.json' }\r\n  ];\r\n\r\n  for (const { pattern, file } of contentPatterns) {\r\n    if (pattern.test(pageContent)) {\r\n      return file;\r\n    }\r\n  }\r\n\r\n  console.warn(`No translation file found for page: ${pageId}, content patterns did not match`);\r\n  return null;\r\n}\r\n\r\n/**\r\n * 验证翻译数据格式（支持新旧两种格式）\r\n */\r\nfunction validateTranslationData(data: any): data is TranslationData {\r\n  console.log('Validating translation data:', data);\r\n  \r\n  if (!data) {\r\n    console.error('Validation failed: data is null or undefined');\r\n    return false;\r\n  }\r\n  \r\n  if (typeof data.version !== 'string') {\r\n    console.error('Validation failed: version is not a string');\r\n    return false;\r\n  }\r\n  \r\n  if (typeof data.pageId !== 'string') {\r\n    console.error('Validation failed: pageId is not a string');\r\n    return false;\r\n  }\r\n  \r\n  if (!Array.isArray(data.fields)) {\r\n    console.error('Validation failed: fields is not an array');\r\n    return false;\r\n  }\r\n  \r\n  for (let i = 0; i < data.fields.length; i++) {\r\n    const field = data.fields[i];\r\n    \r\n    if (!field.key) {\r\n      console.error(`Validation failed: field[${i}].key is missing`);\r\n      return false;\r\n    }\r\n    \r\n    if (!Array.isArray(field.selectors)) {\r\n      console.error(`Validation failed: field[${i}].selectors is not an array`);\r\n      return false;\r\n    }\r\n    \r\n    if (!field.en) {\r\n      console.error(`Validation failed: field[${i}].en is missing`);\r\n      return false;\r\n    }\r\n    \r\n    if (!field.zh) {\r\n      console.error(`Validation failed: field[${i}].zh is missing`);\r\n      return false;\r\n    }\r\n    \r\n    // 检查zh格式（允许brief或detailed为空字符串）\r\n    const zhValid = (\r\n      (typeof field.zh === 'object' && \r\n       typeof field.zh.brief === 'string' && \r\n       typeof field.zh.detailed === 'string') ||\r\n      (typeof field.zh === 'string')\r\n    );\r\n    \r\n    if (!zhValid) {\r\n      console.error(`Validation failed: field[${i}].zh format is invalid`, field.zh);\r\n      return false;\r\n    }\r\n    \r\n    // 检查note格式（更宽松的检查）\r\n    const noteValid = (\r\n      (field.note && typeof field.note === 'object' && \r\n       typeof field.note.brief === 'string' && typeof field.note.detailed === 'string') ||\r\n      (typeof field.note === 'string') ||\r\n      (field.note === undefined) ||\r\n      (field.note === null)\r\n    );\r\n    \r\n    if (!noteValid) {\r\n      console.error(`Validation failed: field[${i}].note format is invalid`, field.note);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  console.log('Validation passed successfully');\r\n  return true;\r\n}\r\n\r\n/**\r\n * 自动检测当前页面类型\r\n */\r\nexport function detectCurrentPage(): string {\r\n  const url = window.location.href;\r\n  const title = document.title;\r\n  const pageContent = document.body.textContent || '';\r\n  \r\n  console.log('Detecting page type...');\r\n  console.log('URL:', url);\r\n  console.log('Title:', title);\r\n  console.log('Page content preview:', pageContent.substring(0, 500));\r\n\r\n  // DS-160的页面通常在URL中包含特定的页面标识符\r\n  // 先尝试从URL中提取页面信息\r\n  const urlPageMatch = url.match(/(?:page|step)[\\s_-]*(\\d+)/i);\r\n  if (urlPageMatch) {\r\n    const pageNum = parseInt(urlPageMatch[1]);\r\n    if (pageNum >= 1 && pageNum <= 18) {\r\n      console.log(`Found page number in URL: page${pageNum}`);\r\n      return `page${pageNum}`;\r\n    }\r\n  }\r\n\r\n  // 基于页面内容特征检测DS-160的18个页面\r\n  // 注意：使用更精确的URL和标题匹配，减少对页面内容的依赖\r\n  const pagePatterns = [\r\n    { pattern: /Personal\\s+Information\\s+1|Surnames.*Given\\s+Names/i, pageId: 'page1' },\r\n    { pattern: /Personal\\s+Information\\s+2|Nationality.*National.*Identification/i, pageId: 'page2' },\r\n    // 优先检查特定的URL模式，这些更可靠\r\n    { pattern: /complete_contact\\.aspx|Address\\s+and\\s+Phone\\s+Information/i, pageId: 'page6' },\r\n    { pattern: /Passport_Visa_Info\\.aspx|Passport\\s+Information/i, pageId: 'page7' }, // Passport Information page\r\n    { pattern: /complete_uscontact\\.aspx|U\\.?S\\.?\\s+Point\\s+of\\s+Contact\\s+Information/i, pageId: 'page8' }, // U.S. Point of Contact Information page\r\n    { pattern: /complete_family1\\.aspx|Family\\s+Information:\\s*Relatives/i, pageId: 'page9' }, // Family Information: Relatives page\r\n    { pattern: /complete_family2\\.aspx|Family\\s+Information:\\s*Spouse/i, pageId: 'page10' }, // Family Information: Spouse page\r\n    { pattern: /complete_workeducation3\\.aspx|Additional\\s+Work\\/Education\\/Training\\s+Information/i, pageId: 'page13' },\r\n    { pattern: /complete_workeducation2\\.aspx|Previous\\s+Work\\/Education\\/Training\\s+Information|Work\\/Education\\/Training\\s+Information\\s+2/i, pageId: 'page12' },\r\n    { pattern: /complete_workeducation1\\.aspx|Present\\s+Work\\/Education\\/Training\\s+Information/i, pageId: 'page11' },\r\n    // Prioritize Security and Background pages over other patterns\r\n    { pattern: /complete_securityandbackground1\\.aspx|Security\\s+and\\s+Background:\\s*Part\\s*1/i, pageId: 'page14' },\r\n    { pattern: /complete_securityandbackground2\\.aspx|Security\\s+and\\s+Background:\\s*Part\\s*2/i, pageId: 'page15' },\r\n    { pattern: /complete_securityandbackground3\\.aspx|Security\\s+and\\s+Background:\\s*Part\\s*3/i, pageId: 'page16' },\r\n    { pattern: /complete_securityandbackground4\\.aspx|Security\\s+and\\s+Background:\\s*Part\\s*4/i, pageId: 'page17' },\r\n    { pattern: /complete_securityandbackground5\\.aspx|Security\\s+and\\s+Background:\\s*Part\\s*5/i, pageId: 'page18' },\r\n    { pattern: /previousustravel|Previous\\s+U\\.?S\\.?\\s+Travel\\s*$/i, pageId: 'page5' },\r\n    { pattern: /Travel\\s+Information(?!\\s*(Previous|Companions))/i, pageId: 'page3' },\r\n    { pattern: /Travel\\s+Companions(?!\\s*Information)/i, pageId: 'page4' },\r\n    { pattern: /SEVIS\\s+Information/i, pageId: 'page19' },\r\n    { pattern: /Upload\\s+Photo|Photo\\s+Upload/i, pageId: 'page20' }\r\n  ];\r\n\r\n  // 检测页面内容、标题和URL\r\n  for (const { pattern, pageId } of pagePatterns) {\r\n    const contentMatch = pattern.test(pageContent);\r\n    const titleMatch = pattern.test(title);\r\n    const urlMatch = pattern.test(url);\r\n    \r\n    if (contentMatch || titleMatch || urlMatch) {\r\n      console.log(`Detected DS-160 page: ${pageId} based on pattern match`, {\r\n        content: contentMatch,\r\n        title: titleMatch,\r\n        url: urlMatch\r\n      });\r\n      return pageId;\r\n    }\r\n  }\r\n\r\n  // 兼容性检测：基于旧的检测逻辑\r\n  if (pageContent.includes('Surnames') && pageContent.includes('Given Names')) {\r\n    return 'page1'; // 个人信息页面\r\n  }\r\n  \r\n  if (pageContent.includes('Home Address') || pageContent.includes('Phone Number')) {\r\n    return 'page6'; // 联系信息通常在第6页\r\n  }\r\n\r\n  // 基于URL路径的兼容性检测\r\n  if (url.includes('personal')) {\r\n    return 'page1';\r\n  }\r\n  \r\n  if (url.includes('contact')) {\r\n    return 'page6';\r\n  }\r\n\r\n  // 如果都无法识别，返回第一页作为默认\r\n  console.warn('Unable to detect specific DS-160 page, defaulting to page1');\r\n  return 'page1';\r\n}\r\n\r\n/**\r\n * 清空翻译数据缓存\r\n */\r\nexport function clearTranslationCache(): void {\r\n  translationCache.clear();\r\n}\r\n","import { saveFormData } from '@/shared/dom-utils';\r\n\r\nlet userActivityTrackingActive = false;\r\nlet lastUserGestureTime = Date.now();\r\n\r\n/**\r\n * 初始化用户活动跟踪\r\n */\r\nexport function initializeUserActivityTracking(): void {\r\n  if (userActivityTrackingActive) {\r\n    console.log('🎯 User activity tracking already active');\r\n    return;\r\n  }\r\n\r\n  console.log('🎯 Initializing user activity tracking for gesture-based refresh...');\r\n\r\n  // 跟踪真实用户交互\r\n  const gestureEvents = ['click', 'keydown', 'touchstart', 'mousedown'];\r\n  \r\n  gestureEvents.forEach(eventType => {\r\n    document.addEventListener(eventType, () => {\r\n      lastUserGestureTime = Date.now();\r\n      console.log(`👆 User gesture detected: ${eventType}`);\r\n    }, { passive: true });\r\n  });\r\n\r\n  userActivityTrackingActive = true;\r\n  console.log('✅ User activity tracking initialized');\r\n}\r\n\r\n/**\r\n * 执行用户手势驱动的刷新\r\n */\r\nexport function executeUserGestureRefresh(saveCallback?: () => void): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    console.log('👆 Executing user gesture refresh...');\r\n\r\n    // 1. 先保存表单数据\r\n    if (saveCallback) {\r\n      try {\r\n        saveCallback();\r\n        console.log('💾 Form data saved before refresh');\r\n      } catch (error) {\r\n        console.warn('Failed to save form data:', error);\r\n      }\r\n    }\r\n\r\n    // 2. 检查用户手势状态\r\n    const timeSinceGesture = Date.now() - lastUserGestureTime;\r\n    const hasRecentGesture = timeSinceGesture < 30000; // 30秒内有用户交互\r\n\r\n    if (document.hasStoredUserActivation || hasRecentGesture) {\r\n      console.log('✅ User gesture available, proceeding with immediate refresh...');\r\n      \r\n      // 立即执行刷新\r\n      setTimeout(() => {\r\n        performGentleRefresh();\r\n        resolve();\r\n      }, 100);\r\n    } else {\r\n      console.log('⏳ No recent user gesture, using alternative refresh method...');\r\n      \r\n      // 使用替代方法\r\n      setTimeout(() => {\r\n        performAlternativeRefresh();\r\n        resolve();\r\n      }, 200);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 执行温和的页面刷新\r\n */\r\nfunction performGentleRefresh(): void {\r\n  console.log('🌸 Performing gentle user gesture refresh...');\r\n  \r\n  try {\r\n    // 方法1: 标准reload\r\n    window.location.reload();\r\n  } catch (error) {\r\n    console.log('Standard reload failed, trying href method:', error);\r\n    // 方法2: href重新赋值\r\n    window.location.href = window.location.href;\r\n  }\r\n}\r\n\r\n/**\r\n * 执行替代刷新方法（无用户手势时）\r\n */\r\nfunction performAlternativeRefresh(): void {\r\n  console.log('🔄 Performing alternative refresh (no user gesture)...');\r\n  \r\n  // 方法1: 使用pushState + replace组合\r\n  try {\r\n    const currentURL = window.location.href;\r\n    window.history.pushState({}, '', currentURL);\r\n    setTimeout(() => {\r\n      window.location.replace(currentURL);\r\n    }, 100);\r\n  } catch (error) {\r\n    console.log('Alternative method 1 failed:', error);\r\n    \r\n    // 方法2: 直接使用replace\r\n    try {\r\n      window.location.replace(window.location.href);\r\n    } catch (error2) {\r\n      console.log('Alternative method 2 failed:', error2);\r\n      \r\n      // 方法3: 最后备选方案\r\n      window.location.href = window.location.href;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 等待用户交互\r\n */\r\nfunction waitForUserInteraction(): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    console.log('⏳ Waiting for user interaction...');\r\n    \r\n    const gestureEvents = ['click', 'keydown', 'touchstart', 'mousedown'];\r\n    let resolved = false;\r\n    \r\n    const handleGesture = () => {\r\n      if (!resolved) {\r\n        resolved = true;\r\n        console.log('✅ User gesture detected, proceeding with refresh');\r\n        \r\n        // 清理监听器\r\n        gestureEvents.forEach(eventType => {\r\n          document.removeEventListener(eventType, handleGesture);\r\n        });\r\n        \r\n        resolve();\r\n      }\r\n    };\r\n    \r\n    // 添加临时监听器\r\n    gestureEvents.forEach(eventType => {\r\n      document.addEventListener(eventType, handleGesture, { once: true, passive: true });\r\n    });\r\n    \r\n    // 5秒后超时，强制继续\r\n    setTimeout(() => {\r\n      if (!resolved) {\r\n        resolved = true;\r\n        console.log('⏰ Gesture wait timeout, proceeding anyway');\r\n        \r\n        gestureEvents.forEach(eventType => {\r\n          document.removeEventListener(eventType, handleGesture);\r\n        });\r\n        \r\n        resolve();\r\n      }\r\n    }, 5000);\r\n  });\r\n}","import { saveFormData, restoreFormData, throttle } from '@/shared/dom-utils';\r\n\r\nlet formProtectionActive = false;\r\nlet autoSaveTimer: number | null = null;\r\nlet emergencySaveActive = false;\r\n\r\n/**\r\n * 激活增强的表单保护\r\n */\r\nexport function activateEnhancedFormProtection(): void {\r\n  if (formProtectionActive) {\r\n    console.log('🛡️ Enhanced form protection already active');\r\n    return;\r\n  }\r\n\r\n  console.log('🛡️ Activating enhanced form protection...');\r\n\r\n  // 1. 多重备份机制\r\n  setupMultiLayerBackup();\r\n\r\n  // 2. 智能恢复\r\n  setupIntelligentRecovery();\r\n\r\n  // 3. 紧急保护监听器\r\n  setupEmergencyProtection();\r\n\r\n  formProtectionActive = true;\r\n  console.log('✅ Enhanced form protection activated');\r\n}\r\n\r\n/**\r\n * 设置多层备份机制\r\n */\r\nfunction setupMultiLayerBackup(): void {\r\n  console.log('📦 Setting up multi-layer backup system...');\r\n\r\n  // 层级1: 节流自动保存（30秒）\r\n  const throttledSave = throttle(() => {\r\n    console.log('💾 Auto-save (throttled 30s)...');\r\n    saveFormData();\r\n  }, 30000);\r\n\r\n  // 层级2: 表单变化即时保存（节流）\r\n  const formChangeEvents = ['input', 'change', 'blur', 'select'];\r\n  formChangeEvents.forEach(eventType => {\r\n    document.addEventListener(eventType, (event) => {\r\n      const target = event.target as HTMLElement;\r\n      if (target && (\r\n        target.tagName === 'INPUT' || \r\n        target.tagName === 'SELECT' || \r\n        target.tagName === 'TEXTAREA'\r\n      )) {\r\n        throttledSave();\r\n      }\r\n    }, { passive: true });\r\n  });\r\n\r\n  // 层级3: 定期自动保存（降低频率到60秒）\r\n  autoSaveTimer = window.setInterval(() => {\r\n    console.log('🕐 Periodic auto-save (60s interval)...');\r\n    saveFormData();\r\n  }, 60000);\r\n\r\n  console.log('✅ Multi-layer backup system ready');\r\n}\r\n\r\n/**\r\n * 设置智能恢复\r\n */\r\nfunction setupIntelligentRecovery(): void {\r\n  console.log('🔄 Setting up intelligent recovery...');\r\n\r\n  // 检查是否有保存的数据\r\n  const savedData = sessionStorage.getItem('ds160-form-data');\r\n  if (!savedData) {\r\n    console.log('📝 No saved form data found');\r\n    return;\r\n  }\r\n\r\n  console.log('📁 Saved form data detected, preparing recovery...');\r\n\r\n  // 延迟恢复，确保页面完全加载\r\n  setTimeout(() => {\r\n    try {\r\n      restoreFormData();\r\n      showRecoveryNotification();\r\n      console.log('✅ Form data recovery completed');\r\n    } catch (error) {\r\n      console.error('❌ Form data recovery failed:', error);\r\n    }\r\n  }, 500); // 稍微延长等待时间\r\n}\r\n\r\n/**\r\n * 设置紧急保护监听器\r\n */\r\nfunction setupEmergencyProtection(): void {\r\n  console.log('🚨 Setting up emergency protection listeners...');\r\n\r\n  if (emergencySaveActive) {\r\n    console.log('Emergency protection already active');\r\n    return;\r\n  }\r\n\r\n  // 页面卸载前保存\r\n  const emergencySave = () => {\r\n    console.log('🚨 Emergency save triggered!');\r\n    try {\r\n      saveFormData();\r\n    } catch (error) {\r\n      console.error('Emergency save failed:', error);\r\n    }\r\n  };\r\n\r\n  // 多种卸载事件监听\r\n  window.addEventListener('beforeunload', emergencySave);\r\n  window.addEventListener('pagehide', emergencySave);\r\n  \r\n  // 页面可见性变化监听\r\n  document.addEventListener('visibilitychange', () => {\r\n    if (document.hidden) {\r\n      console.log('📱 Page hidden, triggering emergency save');\r\n      emergencySave();\r\n    }\r\n  });\r\n\r\n  // 浏览器标签失焦监听\r\n  window.addEventListener('blur', () => {\r\n    console.log('👁️ Window blur, triggering save');\r\n    emergencySave();\r\n  });\r\n\r\n  emergencySaveActive = true;\r\n  console.log('✅ Emergency protection listeners ready');\r\n}\r\n\r\n/**\r\n * 显示恢复通知\r\n */\r\nfunction showRecoveryNotification(): void {\r\n  // 检查是否已经显示过通知\r\n  if (document.querySelector('.ds160-recovery-notification')) {\r\n    return;\r\n  }\r\n\r\n  const notification = document.createElement('div');\r\n  notification.className = 'ds160-recovery-notification';\r\n  notification.innerHTML = `\r\n    <div class=\"notification-content\">\r\n      <span class=\"icon\">📁</span>\r\n      <span class=\"message\">表单数据已自动恢复</span>\r\n      <button class=\"close-btn\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\r\n    </div>\r\n  `;\r\n\r\n  // 样式\r\n  notification.style.cssText = `\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    background: linear-gradient(135deg, #4CAF50, #45a049);\r\n    color: white;\r\n    padding: 15px 20px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n    z-index: 10000;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n    font-size: 14px;\r\n    max-width: 300px;\r\n    animation: slideIn 0.3s ease-out;\r\n  `;\r\n\r\n  // 内容样式\r\n  const style = document.createElement('style');\r\n  style.textContent = `\r\n    @keyframes slideIn {\r\n      from { transform: translateX(100%); opacity: 0; }\r\n      to { transform: translateX(0); opacity: 1; }\r\n    }\r\n    \r\n    .ds160-recovery-notification .notification-content {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 10px;\r\n    }\r\n    \r\n    .ds160-recovery-notification .icon {\r\n      font-size: 18px;\r\n    }\r\n    \r\n    .ds160-recovery-notification .message {\r\n      flex: 1;\r\n      font-weight: 500;\r\n    }\r\n    \r\n    .ds160-recovery-notification .close-btn {\r\n      background: rgba(255,255,255,0.2);\r\n      border: none;\r\n      color: white;\r\n      width: 24px;\r\n      height: 24px;\r\n      border-radius: 50%;\r\n      cursor: pointer;\r\n      font-size: 16px;\r\n      line-height: 1;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .ds160-recovery-notification .close-btn:hover {\r\n      background: rgba(255,255,255,0.3);\r\n    }\r\n  `;\r\n\r\n  document.head.appendChild(style);\r\n  document.body.appendChild(notification);\r\n\r\n  // 3秒后自动消失\r\n  setTimeout(() => {\r\n    if (notification.parentElement) {\r\n      notification.style.animation = 'slideIn 0.3s ease-in reverse';\r\n      setTimeout(() => {\r\n        notification.remove();\r\n        style.remove();\r\n      }, 300);\r\n    }\r\n  }, 3000);\r\n\r\n  console.log('📢 Recovery notification displayed');\r\n}\r\n\r\n/**\r\n * 清理表单保护资源\r\n */\r\nexport function cleanupFormProtection(): void {\r\n  console.log('🧹 Cleaning up form protection resources...');\r\n\r\n  if (autoSaveTimer) {\r\n    clearInterval(autoSaveTimer);\r\n    autoSaveTimer = null;\r\n  }\r\n\r\n  formProtectionActive = false;\r\n  emergencySaveActive = false;\r\n\r\n  console.log('✅ Form protection cleanup completed');\r\n}","import { TranslationInjector } from './translation-injector';\r\nimport { TranslationUIController } from './ui-controller';\r\nimport { loadMergedTranslationData, detectCurrentPage } from './translation-loader';\r\nimport { getSettings, onSettingsChange } from '@/shared/storage';\r\nimport { waitForDOM, saveFormData, restoreFormData, throttle } from '@/shared/dom-utils';\r\nimport { executeUserGestureRefresh, initializeUserActivityTracking } from './user-gesture-refresh';\r\nimport { activateEnhancedFormProtection } from './enhanced-form-protection';\r\n\r\n// 全局实例\r\nlet injector: TranslationInjector | null = null;\r\nlet uiController: TranslationUIController | null = null;\r\n\r\n// 用户活动跟踪\r\nlet lastActivityTime = Date.now();\r\nlet autoRefreshTimer: number | null = null;\r\n\r\n// 🎯 优化后的配置参数\r\nconst AUTO_REFRESH_CONFIG = {\r\n  // 自动保存间隔：30秒（之前是5秒，减少性能影响）\r\n  AUTO_SAVE_THROTTLE: 30 * 1000,\r\n  \r\n  // 无活动阈值：2分钟（保持不变，这个合理）\r\n  INACTIVE_THRESHOLD: 2 * 60 * 1000,\r\n  \r\n  // 检查间隔：60秒（之前是5分钟，更及时检测）\r\n  CHECK_INTERVAL: 60 * 1000,\r\n  \r\n  // 表单数据恢复延迟\r\n  RESTORE_DELAY: 100\r\n};\r\n\r\n/**\r\n * 初始化翻译功能\r\n */\r\nasync function initializeTranslation(): Promise<void> {\r\n  try {\r\n    console.log('DS-160 Chinese Helper: Initializing translation...');\r\n    \r\n    // 等待DOM加载完成\r\n    await waitForDOM();\r\n    \r\n    // 检测当前页面类型\r\n    const pageType = detectCurrentPage();\r\n    console.log(`Detected page type: ${pageType}`);\r\n    \r\n    // 加载设置\r\n    const settings = await getSettings();\r\n    console.log('Loaded settings:', settings);\r\n    \r\n    // 创建注入器\r\n    injector = new TranslationInjector(settings);\r\n    \r\n    // 创建UI控制器\r\n    uiController = new TranslationUIController(settings);\r\n    \r\n    // 加载合并的翻译数据（包含关联页面）\r\n    const translationData = await loadMergedTranslationData(pageType);\r\n    if (translationData) {\r\n      injector.setTranslationData(translationData);\r\n      console.log(`Loaded merged translation data for ${pageType}:`, translationData.fields.length, 'fields');\r\n      \r\n      // 开始注入翻译\r\n      if (settings.enabled) {\r\n        injector.injectTranslations();\r\n      }\r\n    } else {\r\n      console.warn('No translation data available for current page');\r\n    }\r\n    \r\n    // 监听设置变化\r\n    onSettingsChange((newSettings) => {\r\n      console.log('Settings updated:', newSettings);\r\n      if (injector) {\r\n        injector.updateSettings(newSettings);\r\n      }\r\n      if (uiController) {\r\n        uiController.updateSettings(newSettings);\r\n      }\r\n    });\r\n    \r\n    // 恢复表单数据（如果有的话）\r\n    setTimeout(() => {\r\n      restoreFormData();\r\n    }, AUTO_REFRESH_CONFIG.RESTORE_DELAY);\r\n    \r\n    // 初始化用户活动跟踪\r\n    initializeUserActivityTracking();\r\n    \r\n    // 激活增强的表单保护\r\n    activateEnhancedFormProtection();\r\n    \r\n    // 设置用户活动监听器和自动刷新机制\r\n    setupOptimizedAutoRefresh();\r\n    \r\n    console.log('DS-160 Chinese Helper: Translation initialized successfully');\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to initialize translation:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 更新用户活动时间\r\n */\r\nfunction updateActivityTime(): void {\r\n  lastActivityTime = Date.now();\r\n}\r\n\r\n/**\r\n * 设置优化后的自动刷新机制\r\n */\r\nfunction setupOptimizedAutoRefresh(): void {\r\n  // 添加用户活动监听器\r\n  const activityEvents = ['mousemove', 'keydown', 'click', 'scroll', 'touchstart'];\r\n  activityEvents.forEach(eventType => {\r\n    document.addEventListener(eventType, updateActivityTime, { passive: true });\r\n  });\r\n\r\n  // 添加表单输入监听器，优化后的保存频率\r\n  const throttledSave = throttle(() => {\r\n    console.log('📝 Auto-saving form data (30s throttle)...');\r\n    saveFormData();\r\n  }, AUTO_REFRESH_CONFIG.AUTO_SAVE_THROTTLE); // 30秒节流，合理的保存频率\r\n  \r\n  const formEvents = ['input', 'change', 'blur'];\r\n  formEvents.forEach(eventType => {\r\n    document.addEventListener(eventType, (event) => {\r\n      const target = event.target as HTMLElement;\r\n      if (target && (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA')) {\r\n        throttledSave();\r\n      }\r\n    }, { passive: true });\r\n  });\r\n\r\n  // 设置定时器，每60秒检查一次用户活动（之前是5分钟，更及时）\r\n  autoRefreshTimer = window.setInterval(() => {\r\n    const inactiveTime = Date.now() - lastActivityTime;\r\n    \r\n    if (inactiveTime > AUTO_REFRESH_CONFIG.INACTIVE_THRESHOLD) {\r\n      console.log(`⏰ User inactive for ${Math.floor(inactiveTime / 1000)}s (threshold: ${AUTO_REFRESH_CONFIG.INACTIVE_THRESHOLD / 1000}s), triggering refresh...`);\r\n      \r\n      // 使用用户手势刷新方法\r\n      executeUserGestureRefresh(saveFormData);\r\n    } else {\r\n      // 显示活动状态（开发调试用）\r\n      const remainingTime = AUTO_REFRESH_CONFIG.INACTIVE_THRESHOLD - inactiveTime;\r\n      console.log(`🟢 User active, ${Math.floor(remainingTime / 1000)}s until refresh threshold`);\r\n    }\r\n  }, AUTO_REFRESH_CONFIG.CHECK_INTERVAL); // 每60秒检查一次\r\n\r\n  console.log(`🔄 Optimized auto refresh initialized:`);\r\n  console.log(`  - Save interval: ${AUTO_REFRESH_CONFIG.AUTO_SAVE_THROTTLE / 1000}s`);\r\n  console.log(`  - Inactive threshold: ${AUTO_REFRESH_CONFIG.INACTIVE_THRESHOLD / 1000}s`);\r\n  console.log(`  - Check interval: ${AUTO_REFRESH_CONFIG.CHECK_INTERVAL / 1000}s`);\r\n}\r\n\r\n/**\r\n * 清理资源\r\n */\r\nfunction cleanup(): void {\r\n  // 清理自动刷新定时器\r\n  if (autoRefreshTimer) {\r\n    clearInterval(autoRefreshTimer);\r\n    autoRefreshTimer = null;\r\n  }\r\n\r\n  // 移除用户活动监听器\r\n  const activityEvents = ['mousemove', 'keydown', 'click', 'scroll', 'touchstart'];\r\n  activityEvents.forEach(eventType => {\r\n    document.removeEventListener(eventType, updateActivityTime);\r\n  });\r\n\r\n  // 移除表单输入监听器\r\n  const formEvents = ['input', 'change', 'select'];\r\n  formEvents.forEach(eventType => {\r\n    document.removeEventListener(eventType, updateActivityTime);\r\n  });\r\n\r\n  if (injector) {\r\n    injector.destroy();\r\n    injector = null;\r\n  }\r\n  if (uiController) {\r\n    uiController.destroy();\r\n    uiController = null;\r\n  }\r\n}\r\n\r\n// 监听页面卸载事件\r\nwindow.addEventListener('beforeunload', cleanup);\r\n\r\n// 监听来自popup或background的消息\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  switch (message.type) {\r\n    case 'GET_TRANSLATION_STATUS':\r\n      sendResponse({\r\n        initialized: injector !== null,\r\n        enabled: injector ? true : false,\r\n        translatedCount: injector ? 0 : 0, // TODO: 从injector获取实际数量\r\n        pageType: detectCurrentPage()\r\n      });\r\n      break;\r\n      \r\n    case 'UPDATE_SETTINGS':\r\n      if (injector && message.settings) {\r\n        injector.updateSettings(message.settings);\r\n      }\r\n      if (uiController && message.settings) {\r\n        uiController.updateSettings(message.settings);\r\n      }\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    case 'REFRESH_TRANSLATION':\r\n      // 使用用户手势刷新方法\r\n      executeUserGestureRefresh(saveFormData);\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    case 'TOGGLE_TRANSLATION':\r\n      if (injector) {\r\n        // 切换翻译显示状态的逻辑可以在这里实现\r\n        console.log('Toggle translation requested');\r\n      }\r\n      sendResponse({ success: true });\r\n      break;\r\n      \r\n    default:\r\n      console.warn('Unknown message type:', message.type);\r\n      sendResponse({ error: 'Unknown message type' });\r\n  }\r\n});\r\n\r\n// 启动初始化\r\ninitializeTranslation();\r\n\r\n// 导出供测试使用\r\nexport { initializeTranslation, cleanup };"],"names":["element","_a"],"mappings":"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"}