{"version":3,"file":"popup.js","sources":["../../src/popup/popup.ts"],"sourcesContent":["import type { TranslationSettings } from '@/shared/types';\r\nimport { getSettings, saveSettings } from '@/shared/storage';\r\n\r\nclass PopupController {\r\n  private settings: TranslationSettings | null = null;\r\n  private isCurrentPageDS160 = false;\r\n\r\n  constructor() {\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * 初始化弹窗\r\n   */\r\n  private async init(): Promise<void> {\r\n    try {\r\n      // 加载设置\r\n      this.settings = await getSettings();\r\n      \r\n      // 检查当前页面状态\r\n      await this.checkPageStatus();\r\n      \r\n      // 设置UI\r\n      this.setupUI();\r\n      \r\n      // 绑定事件\r\n      this.bindEvents();\r\n      \r\n      console.log('Popup initialized');\r\n    } catch (error) {\r\n      console.error('Failed to initialize popup:', error);\r\n      this.showError('初始化失败');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查当前页面状态\r\n   */\r\n  private async checkPageStatus(): Promise<void> {\r\n    try {\r\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n      \r\n      if (!tab.url) {\r\n        this.updateStatus('无法获取页面信息', 'error');\r\n        return;\r\n      }\r\n\r\n      // 检查是否为DS-160页面\r\n      this.isCurrentPageDS160 = tab.url.includes('ceac.state.gov');\r\n      \r\n      if (this.isCurrentPageDS160) {\r\n        // 向content script发送消息获取状态\r\n        try {\r\n          const response = await chrome.tabs.sendMessage(tab.id!, { type: 'GET_TRANSLATION_STATUS' });\r\n          if (response && response.initialized) {\r\n            this.updateStatus('翻译功能已启用', 'success');\r\n            this.updateStats(response);\r\n          } else {\r\n            this.updateStatus('正在初始化...', 'loading');\r\n          }\r\n        } catch (error) {\r\n          this.updateStatus('内容脚本未就绪', 'warning');\r\n        }\r\n      } else {\r\n        this.updateStatus('请打开DS-160页面', 'warning');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking page status:', error);\r\n      this.updateStatus('状态检查失败', 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置UI初始状态\r\n   */\r\n  private setupUI(): void {\r\n    if (!this.settings) return;\r\n\r\n    // 设置控件值\r\n    const enabledCheckbox = document.getElementById('enabled-checkbox') as HTMLInputElement;\r\n    const modeSelect = document.getElementById('mode-select') as HTMLSelectElement;\r\n    const notesCheckbox = document.getElementById('notes-checkbox') as HTMLInputElement;\r\n    const positionSelect = document.getElementById('position-select') as HTMLSelectElement;\r\n\r\n    if (enabledCheckbox) enabledCheckbox.checked = this.settings.enabled;\r\n    if (modeSelect) modeSelect.value = this.settings.mode;\r\n    if (notesCheckbox) notesCheckbox.checked = this.settings.showNotes;\r\n    if (positionSelect) positionSelect.value = this.settings.position;\r\n\r\n    // 禁用非DS-160页面的控件\r\n    if (!this.isCurrentPageDS160) {\r\n      const controls = document.querySelectorAll('input, select, button');\r\n      controls.forEach(control => {\r\n        if (control.id !== 'settings-btn') {\r\n          (control as HTMLInputElement).disabled = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绑定事件监听器\r\n   */\r\n  private bindEvents(): void {\r\n    // 启用/禁用翻译\r\n    const enabledCheckbox = document.getElementById('enabled-checkbox') as HTMLInputElement;\r\n    enabledCheckbox?.addEventListener('change', () => {\r\n      this.updateSetting('enabled', enabledCheckbox.checked);\r\n    });\r\n\r\n    // 模式切换\r\n    const modeSelect = document.getElementById('mode-select') as HTMLSelectElement;\r\n    modeSelect?.addEventListener('change', () => {\r\n      this.updateSetting('mode', modeSelect.value as 'brief' | 'detailed');\r\n    });\r\n\r\n    // 注释显示\r\n    const notesCheckbox = document.getElementById('notes-checkbox') as HTMLInputElement;\r\n    notesCheckbox?.addEventListener('change', () => {\r\n      this.updateSetting('showNotes', notesCheckbox.checked);\r\n    });\r\n\r\n    // 位置设置\r\n    const positionSelect = document.getElementById('position-select') as HTMLSelectElement;\r\n    positionSelect?.addEventListener('change', () => {\r\n      this.updateSetting('position', positionSelect.value as 'right' | 'below');\r\n    });\r\n\r\n    // 刷新按钮\r\n    const refreshBtn = document.getElementById('refresh-btn');\r\n    refreshBtn?.addEventListener('click', () => {\r\n      this.refreshTranslation();\r\n    });\r\n\r\n    // 设置按钮\r\n    const settingsBtn = document.getElementById('settings-btn');\r\n    settingsBtn?.addEventListener('click', () => {\r\n      this.openSettings();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  private async updateSetting(key: keyof TranslationSettings, value: any): Promise<void> {\r\n    if (!this.settings) return;\r\n\r\n    try {\r\n      this.settings[key] = value;\r\n      await saveSettings({ [key]: value });\r\n      \r\n      // 通知content script更新\r\n      if (this.isCurrentPageDS160) {\r\n        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n        if (tab.id) {\r\n          await chrome.tabs.sendMessage(tab.id, { \r\n            type: 'UPDATE_SETTINGS', \r\n            settings: this.settings \r\n          });\r\n          \r\n          // 对于影响显示的设置，显示特别的反馈\r\n          if (key === 'mode' || key === 'position' || key === 'showNotes') {\r\n            this.showSuccess('设置已更新，翻译已刷新');\r\n          } else {\r\n            this.showSuccess('设置已保存');\r\n          }\r\n        }\r\n      } else {\r\n        this.showSuccess('设置已保存');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error updating setting:', error);\r\n      this.showError('设置保存失败');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 刷新翻译\r\n   */\r\n  private async refreshTranslation(): Promise<void> {\r\n    if (!this.isCurrentPageDS160) return;\r\n\r\n    try {\r\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n      if (tab.id) {\r\n        await chrome.tabs.sendMessage(tab.id, { type: 'REFRESH_TRANSLATION' });\r\n        this.showSuccess('翻译已刷新');\r\n        setTimeout(() => this.checkPageStatus(), 1000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing translation:', error);\r\n      this.showError('刷新失败');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 打开设置页面\r\n   */\r\n  private openSettings(): void {\r\n    chrome.runtime.openOptionsPage();\r\n  }\r\n\r\n  /**\r\n   * 更新状态显示\r\n   */\r\n  private updateStatus(text: string, type: 'success' | 'error' | 'warning' | 'loading' = 'success'): void {\r\n    const statusText = document.getElementById('status-text');\r\n    const statusDot = document.querySelector('.status-dot') as HTMLElement;\r\n\r\n    if (statusText) statusText.textContent = text;\r\n    if (statusDot) {\r\n      statusDot.className = `status-dot ${type}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新统计信息\r\n   */\r\n  private updateStats(data: any): void {\r\n    const translatedCount = document.getElementById('translated-count');\r\n    const pageType = document.getElementById('page-type');\r\n\r\n    if (translatedCount) {\r\n      translatedCount.textContent = data.translatedCount || '0';\r\n    }\r\n    \r\n    if (pageType) {\r\n      pageType.textContent = data.pageType || '未知';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示成功消息\r\n   */\r\n  private showSuccess(message: string): void {\r\n    this.updateStatus(message, 'success');\r\n    setTimeout(() => {\r\n      if (this.isCurrentPageDS160) {\r\n        this.updateStatus('翻译功能已启用', 'success');\r\n      } else {\r\n        this.updateStatus('请打开DS-160页面', 'warning');\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  /**\r\n   * 显示错误消息\r\n   */\r\n  private showError(message: string): void {\r\n    this.updateStatus(message, 'error');\r\n    setTimeout(() => {\r\n      this.checkPageStatus();\r\n    }, 3000);\r\n  }\r\n}\r\n\r\n// 初始化弹窗\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new PopupController();\r\n});\r\n"],"names":[],"mappings":";AAGA,MAAM,gBAAgB;AAAA,EAIpB,cAAc;AAHd,SAAQ,WAAuC;AAC/C,SAAQ,qBAAqB;AAG3B,SAAK,KAAA;AAAA,EACP;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,OAAsB;AAClC,QAAI;AAEF,WAAK,WAAW,MAAM,YAAA;AAGtB,YAAM,KAAK,gBAAA;AAGX,WAAK,QAAA;AAGL,WAAK,WAAA;AAEL,cAAQ,IAAI,mBAAmB;AAAA,IACjC,SAAS,OAAO;AACd,cAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAK,UAAU,OAAO;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,kBAAiC;AAC7C,QAAI;AACF,YAAM,CAAC,GAAG,IAAI,MAAM,OAAO,KAAK,MAAM,EAAE,QAAQ,MAAM,eAAe,KAAA,CAAM;AAE3E,UAAI,CAAC,IAAI,KAAK;AACZ,aAAK,aAAa,YAAY,OAAO;AACrC;AAAA,MACF;AAGA,WAAK,qBAAqB,IAAI,IAAI,SAAS,gBAAgB;AAE3D,UAAI,KAAK,oBAAoB;AAE3B,YAAI;AACF,gBAAM,WAAW,MAAM,OAAO,KAAK,YAAY,IAAI,IAAK,EAAE,MAAM,0BAA0B;AAC1F,cAAI,YAAY,SAAS,aAAa;AACpC,iBAAK,aAAa,WAAW,SAAS;AACtC,iBAAK,YAAY,QAAQ;AAAA,UAC3B,OAAO;AACL,iBAAK,aAAa,YAAY,SAAS;AAAA,UACzC;AAAA,QACF,SAAS,OAAO;AACd,eAAK,aAAa,WAAW,SAAS;AAAA,QACxC;AAAA,MACF,OAAO;AACL,aAAK,aAAa,eAAe,SAAS;AAAA,MAC5C;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAK,aAAa,UAAU,OAAO;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,UAAgB;AACtB,QAAI,CAAC,KAAK,SAAU;AAGpB,UAAM,kBAAkB,SAAS,eAAe,kBAAkB;AAClE,UAAM,aAAa,SAAS,eAAe,aAAa;AACxD,UAAM,gBAAgB,SAAS,eAAe,gBAAgB;AAC9D,UAAM,iBAAiB,SAAS,eAAe,iBAAiB;AAEhE,QAAI,gBAAiB,iBAAgB,UAAU,KAAK,SAAS;AAC7D,QAAI,WAAY,YAAW,QAAQ,KAAK,SAAS;AACjD,QAAI,cAAe,eAAc,UAAU,KAAK,SAAS;AACzD,QAAI,eAAgB,gBAAe,QAAQ,KAAK,SAAS;AAGzD,QAAI,CAAC,KAAK,oBAAoB;AAC5B,YAAM,WAAW,SAAS,iBAAiB,uBAAuB;AAClE,eAAS,QAAQ,CAAA,YAAW;AAC1B,YAAI,QAAQ,OAAO,gBAAgB;AAChC,kBAA6B,WAAW;AAAA,QAC3C;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,aAAmB;AAEzB,UAAM,kBAAkB,SAAS,eAAe,kBAAkB;AAClE,uDAAiB,iBAAiB,UAAU,MAAM;AAChD,WAAK,cAAc,WAAW,gBAAgB,OAAO;AAAA,IACvD;AAGA,UAAM,aAAa,SAAS,eAAe,aAAa;AACxD,6CAAY,iBAAiB,UAAU,MAAM;AAC3C,WAAK,cAAc,QAAQ,WAAW,KAA6B;AAAA,IACrE;AAGA,UAAM,gBAAgB,SAAS,eAAe,gBAAgB;AAC9D,mDAAe,iBAAiB,UAAU,MAAM;AAC9C,WAAK,cAAc,aAAa,cAAc,OAAO;AAAA,IACvD;AAGA,UAAM,iBAAiB,SAAS,eAAe,iBAAiB;AAChE,qDAAgB,iBAAiB,UAAU,MAAM;AAC/C,WAAK,cAAc,YAAY,eAAe,KAA0B;AAAA,IAC1E;AAGA,UAAM,aAAa,SAAS,eAAe,aAAa;AACxD,6CAAY,iBAAiB,SAAS,MAAM;AAC1C,WAAK,mBAAA;AAAA,IACP;AAGA,UAAM,cAAc,SAAS,eAAe,cAAc;AAC1D,+CAAa,iBAAiB,SAAS,MAAM;AAC3C,WAAK,aAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,cAAc,KAAgC,OAA2B;AACrF,QAAI,CAAC,KAAK,SAAU;AAEpB,QAAI;AACF,WAAK,SAAS,GAAG,IAAI;AACrB,YAAM,aAAa,EAAE,CAAC,GAAG,GAAG,OAAO;AAGnC,UAAI,KAAK,oBAAoB;AAC3B,cAAM,CAAC,GAAG,IAAI,MAAM,OAAO,KAAK,MAAM,EAAE,QAAQ,MAAM,eAAe,KAAA,CAAM;AAC3E,YAAI,IAAI,IAAI;AACV,gBAAM,OAAO,KAAK,YAAY,IAAI,IAAI;AAAA,YACpC,MAAM;AAAA,YACN,UAAU,KAAK;AAAA,UAAA,CAChB;AAGD,cAAI,QAAQ,UAAU,QAAQ,cAAc,QAAQ,aAAa;AAC/D,iBAAK,YAAY,aAAa;AAAA,UAChC,OAAO;AACL,iBAAK,YAAY,OAAO;AAAA,UAC1B;AAAA,QACF;AAAA,MACF,OAAO;AACL,aAAK,YAAY,OAAO;AAAA,MAC1B;AAAA,IAEF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAK,UAAU,QAAQ;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,qBAAoC;AAChD,QAAI,CAAC,KAAK,mBAAoB;AAE9B,QAAI;AACF,YAAM,CAAC,GAAG,IAAI,MAAM,OAAO,KAAK,MAAM,EAAE,QAAQ,MAAM,eAAe,KAAA,CAAM;AAC3E,UAAI,IAAI,IAAI;AACV,cAAM,OAAO,KAAK,YAAY,IAAI,IAAI,EAAE,MAAM,uBAAuB;AACrE,aAAK,YAAY,OAAO;AACxB,mBAAW,MAAM,KAAK,gBAAA,GAAmB,GAAI;AAAA,MAC/C;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AACpD,WAAK,UAAU,MAAM;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAqB;AAC3B,WAAO,QAAQ,gBAAA;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKQ,aAAa,MAAc,OAAoD,WAAiB;AACtG,UAAM,aAAa,SAAS,eAAe,aAAa;AACxD,UAAM,YAAY,SAAS,cAAc,aAAa;AAEtD,QAAI,uBAAuB,cAAc;AACzC,QAAI,WAAW;AACb,gBAAU,YAAY,cAAc,IAAI;AAAA,IAC1C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAY,MAAiB;AACnC,UAAM,kBAAkB,SAAS,eAAe,kBAAkB;AAClE,UAAM,WAAW,SAAS,eAAe,WAAW;AAEpD,QAAI,iBAAiB;AACnB,sBAAgB,cAAc,KAAK,mBAAmB;AAAA,IACxD;AAEA,QAAI,UAAU;AACZ,eAAS,cAAc,KAAK,YAAY;AAAA,IAC1C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAY,SAAuB;AACzC,SAAK,aAAa,SAAS,SAAS;AACpC,eAAW,MAAM;AACf,UAAI,KAAK,oBAAoB;AAC3B,aAAK,aAAa,WAAW,SAAS;AAAA,MACxC,OAAO;AACL,aAAK,aAAa,eAAe,SAAS;AAAA,MAC5C;AAAA,IACF,GAAG,GAAI;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,UAAU,SAAuB;AACvC,SAAK,aAAa,SAAS,OAAO;AAClC,eAAW,MAAM;AACf,WAAK,gBAAA;AAAA,IACP,GAAG,GAAI;AAAA,EACT;AACF;AAGA,SAAS,iBAAiB,oBAAoB,MAAM;AAClD,MAAI,gBAAA;AACN,CAAC;"}